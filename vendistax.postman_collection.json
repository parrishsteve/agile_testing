{
  "info": {
    "name": "Vendistax API (Generated from OpenAPI)",
    "_postman_id": "auto-generated-vendistax",
    "description": "Autogenerated collection with basic happy-path requests and status assertions.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "POST users-register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "register"
              ]
            },
            "description": "Register a new user",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"organizationId\": \"org-123456789\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST users-login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "login"
              ]
            },
            "description": "User login with credentials",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"SecurePassword123!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST users-login-api-key",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/login/api-key",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "login",
                "api-key"
              ]
            },
            "description": "Exchange API key for JWT token",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"apiKey\": \"ak_1234567890abcdef\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET users-lockout-status-email",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/lockout-status/{{email}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "lockout-status",
                "{{email}}"
              ]
            },
            "description": "Get user lockout status"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "API Keys",
      "item": [
        {
          "name": "GET auth-api-key",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/api-key",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "api-key"
              ]
            },
            "description": "List API keys"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST auth-api-key",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/api-key",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "api-key"
              ]
            },
            "description": "Create API key",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Production Management API Key\",\n  \"organizationId\": \"970fc072-8588-4eb0-9eff-0a7aa8dcc2b6\",\n  \"isRoot\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET auth-api-key-current",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/api-key/current",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "api-key",
                "current"
              ]
            },
            "description": "Get current API key information"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE auth-api-key-apiKeyId",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/api-key/{{apiKeyId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "api-key",
                "{{apiKeyId}}"
              ]
            },
            "description": "Delete API key"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 204', function () { pm.response.to.have.status(204); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT auth-api-key-apiKeyId-revoke",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/api-key/{{apiKeyId}}/revoke",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "api-key",
                "{{apiKeyId}}",
                "revoke"
              ]
            },
            "description": "Revoke API key"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT auth-api-key-apiKeyId-restore",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/api-key/{{apiKeyId}}/restore",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "api-key",
                "{{apiKeyId}}",
                "restore"
              ]
            },
            "description": "Restore API key"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "OTP",
      "item": [
        {
          "name": "POST auth-otp",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/otp",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "otp"
              ]
            },
            "description": "Create OTP code",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"expiresInMinutes\": 30,\n  \"description\": \"Dashboard access token\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET auth-otp-otp_code",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/otp/{{otpCode}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "otp",
                "{{otpCode}}"
              ]
            },
            "description": "Get OTP information"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST auth-otp-redeem",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/otp/redeem",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "otp",
                "redeem"
              ]
            },
            "description": "Redeem OTP code",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"otpCode\": \"ABC123DEF\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Dashboard",
      "item": [
        {
          "name": "POST auth-dashboard-token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/dashboard-token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "dashboard-token"
              ]
            },
            "description": "Get dashboard access token",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"organizationId\": \"org-123456789\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Organizations",
      "item": [
        {
          "name": "GET organizations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organizations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organizations"
              ]
            },
            "description": "Get all organizations"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST organizations",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organizations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organizations"
              ]
            },
            "description": "Create a new organization"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET organizations-orgId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organizations/{{orgId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organizations",
                "{{orgId}}"
              ]
            },
            "description": "Get organization by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT organizations-orgId",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organizations/{{orgId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organizations",
                "{{orgId}}"
              ]
            },
            "description": "Update organization by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET organizations-orgId-stores",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organizations/{{orgId}}/stores",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organizations",
                "{{orgId}}",
                "stores"
              ]
            },
            "description": "Get stores for organization"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET organizations-orgId-machines",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organizations/{{orgId}}/machines",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organizations",
                "{{orgId}}",
                "machines"
              ]
            },
            "description": "Get machines for organization"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET organizations-orgId-notification-clients",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organizations/{{orgId}}/notification-clients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organizations",
                "{{orgId}}",
                "notification-clients"
              ]
            },
            "description": "Get notification clients for organization"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Stores",
      "item": [
        {
          "name": "GET stores",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/stores",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "stores"
              ]
            },
            "description": "Get all stores"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST stores",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Automated Tests\",\n  \"description\": \"West Wing lower level medical facility\",\n  \"address\": {\n    \"street1\": \"2745 Sunset Blvd\",\n    \"city\": \"Woodland Hills\",\n    \"state\": \"CA\",\n    \"country\": \"USA\",\n    \"postalCode\": \"91367\"\n  },\n  \"contact\": {\n    \"email\": \"maintenance@athenos-medical.co\",\n    \"phone\": \"+12135575555\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/stores",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "stores"
              ]
            },
            "description": "Create a new store"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Response has store data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('store');",
                  "    pm.expect(responseJson.store).to.have.property('storeId');",
                  "    pm.expect(responseJson.store).to.have.property('name');",
                  "});",
                  "pm.test('Store name matches request', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.store.name).to.eql('Automated Tests');",
                  "});",
                  "// Save storeId for use in other requests",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('storeId', responseJson.store.storeId);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET stores-storeId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/stores/{{storeId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "stores",
                "{{storeId}}"
              ]
            },
            "description": "Get store by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT stores-storeId",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Automated Tests\",\n  \"description\": \"API STORE TEST DONT DELETE\",\n  \"address\": {\n    \"street1\": \"2745 Sunset Blvd\",\n    \"city\": \"Woodland Hills\",\n    \"state\": \"CA\",\n    \"country\": \"USA\",\n    \"postalCode\": \"91367\"\n  },\n  \"contact\": {\n    \"email\": \"maintenance@athenos-medical.co\",\n    \"phone\": \"+12135575555\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/stores/{{storeId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "stores",
                "{{storeId}}"
              ]
            },
            "description": "Update store by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET stores-storeId-machines",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/stores/{{storeId}}/machines",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "stores",
                "{{storeId}}",
                "machines"
              ]
            },
            "description": "Get machines for store"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Machines",
      "item": [
        {
          "name": "GET machines",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/machines",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "machines"
              ]
            },
            "description": "Get all machines"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST machines",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/machines",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "machines"
              ]
            },
            "description": "Create a new machine",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"storeId\": \"{{storeId}}\",\n  \"name\": \"API TEST VM-002 Cafeteria\",\n  \"model\": \"VendMax Pro 2000\",\n  \"serialNumber\": \"VM2000-2024-002\",\n  \"location\": {\n    \"description\": \"Main cafeteria, near coffee station\",\n    \"floor\": 2,\n    \"indoor\": true\n  },\n  \"metadata\": {\n    \"installationDate\": \"2025-01-15\",\n    \"warranty\": \"2 years\",\n    \"technician\": \"John Smith\"\n  },\n  \"images\": []\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET machines-machineId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/machines/{{machineId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "machines",
                "{{machineId}}"
              ]
            },
            "description": "Get machine by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT machines-machineId",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/machines/{{machineId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "machines",
                "{{machineId}}"
              ]
            },
            "description": "Update machine by ID",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"storeId\": \"{{storeId}}\",\n  \"name\": \"API TEST DONT DELETE\",\n  \"model\": \"VendMax Pro 2000\",\n  \"serialNumber\": \"VM2000-2024-001\",\n  \"location\": {\n    \"description\": \"Moved to near elevator bank\",\n    \"floor\": 1,\n    \"indoor\": true\n  },\n  \"metadata\": {\n    \"installationDate\": \"2024-01-15\",\n    \"warranty\": \"2 years\",\n    \"lastMaintenance\": \"2025-01-15\"\n  },\n  \"images\": []\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET machines-machineId-slots",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/machines/{{machineId}}/slots",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "machines",
                "{{machineId}}",
                "slots"
              ]
            },
            "description": "Get slots for machine"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET machines-machineId-assigned-products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/machines/{{machineId}}/assigned-products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "machines",
                "{{machineId}}",
                "assigned-products"
              ]
            },
            "description": "Get assigned products for machine"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Slots",
      "item": [
        {
          "name": "GET slots",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/slots",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "slots"
              ]
            },
            "description": "Get all slots"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST slots",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/slots",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "slots"
              ]
            },
            "description": "Create a new slot",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"machineId\": \"machine-123456789\",\n  \"enabled\": true,\n  \"hardwareId\": \"A1\",\n  \"productSensor\": true,\n  \"label\": \"Row A, Column 1 - Beverages\",\n  \"type\": \"cooled\",\n  \"position\": {\n    \"row\": 1,\n    \"column\": 1\n  },\n  \"dimensions\": {\n    \"height\": 15.5,\n    \"width\": 12,\n    \"length\": 8.5,\n    \"unit\": \"cm\"\n  },\n  \"metadata\": {\n    \"temperatureRange\": \"2-8\\u00b0C\",\n    \"capacity\": 10\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET slots-slotId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/slots/{{slotId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "slots",
                "{{slotId}}"
              ]
            },
            "description": "Get slot by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT slots-slotId",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/slots/{{slotId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "slots",
                "{{slotId}}"
              ]
            },
            "description": "Update slot by ID",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"machineId\": \"machine-123456789\",\n  \"enabled\": false,\n  \"hardwareId\": \"A1-updated\",\n  \"productSensor\": true,\n  \"label\": \"Row A, Column 1 - Premium Beverages\",\n  \"type\": \"heated\",\n  \"position\": {\n    \"row\": 1,\n    \"column\": 1\n  },\n  \"dimensions\": {\n    \"height\": 18,\n    \"width\": 14,\n    \"length\": 10,\n    \"unit\": \"cm\"\n  },\n  \"metadata\": {\n    \"temperatureRange\": \"60-80\\u00b0C\",\n    \"capacity\": 8\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET slots-slotId-doors",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/slots/{{slotId}}/doors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "slots",
                "{{slotId}}",
                "doors"
              ]
            },
            "description": "Get doors for slot"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PATCH slots-slotId-inventory",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/slots/{{slotId}}/inventory",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "slots",
                "{{slotId}}",
                "inventory"
              ]
            },
            "description": "Update slot inventory",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 8\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Doors",
      "item": [
        {
          "name": "GET doors",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/doors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "doors"
              ]
            },
            "description": "Get all doors"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST doors",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/doors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "doors"
              ]
            },
            "description": "Create a new door",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"slotId\": \"slot-123456789\",\n  \"enabled\": true,\n  \"motorized\": false,\n  \"orientation\": \"front\",\n  \"hardwareId\": \"hw-door-001\",\n  \"position\": {\n    \"row\": 1,\n    \"column\": 2\n  },\n  \"metadata\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET doors-doorId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/doors/{{doorId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "doors",
                "{{doorId}}"
              ]
            },
            "description": "Get door by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT doors-doorId",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/doors/{{doorId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "doors",
                "{{doorId}}"
              ]
            },
            "description": "Update door by ID",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"slotId\": \"slot-123456789\",\n  \"enabled\": true,\n  \"motorized\": true,\n  \"orientation\": \"rear\",\n  \"hardwareId\": \"hw-door-001-updated\",\n  \"position\": {\n    \"row\": 1,\n    \"column\": 2\n  },\n  \"metadata\": {\n    \"lastMaintenance\": \"2025-01-15\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE doors-doorId",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/doors/{{doorId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "doors",
                "{{doorId}}"
              ]
            },
            "description": "Delete door by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 204', function () { pm.response.to.have.status(204); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST doors-doorId-lock",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/doors/{{doorId}}/lock",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "doors",
                "{{doorId}}",
                "lock"
              ]
            },
            "description": "Lock door"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST doors-doorId-unlock",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/doors/{{doorId}}/unlock",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "doors",
                "{{doorId}}",
                "unlock"
              ]
            },
            "description": "Unlock door"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Organization Products",
      "item": [
        {
          "name": "GET organization-products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organization-products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organization-products"
              ]
            },
            "description": "Get organization products"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST organization-products",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organization-products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organization-products"
              ]
            },
            "description": "Create organization product",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"externalProductId\": \"SKU-025-ORG\",\n  \"organizationId\": \"org-123456789\",\n  \"name\": \"Mountain Dew - Organization Version\",\n  \"description\": \"12 oz. can - Custom pricing\",\n  \"brand\": \"PepsiCo\",\n  \"category\": \"snacks\",\n  \"price\": 2.79,\n  \"currency\": \"USD\",\n  \"weight\": {\n    \"value\": 355,\n    \"unit\": \"gram\"\n  },\n  \"tempControl\": {\n    \"min\": 2,\n    \"max\": 8,\n    \"type\": \"cooled\",\n    \"unit\": \"celsius\"\n  },\n  \"shelfLifeMax\": 365,\n  \"dimensions\": {\n    \"width\": 6.98,\n    \"height\": 12.19,\n    \"length\": 6.98,\n    \"unit\": \"cm\"\n  },\n  \"images\": [\n    {\n      \"url\": \"https://cdn.example.com/mountain-dew-org.jpg\",\n      \"alt\": \"Mountain Dew 12oz can\",\n      \"tag\": \"primary\"\n    }\n  ],\n  \"tags\": [\n    \"beverage\",\n    \"citrus\",\n    \"caffeinated\"\n  ],\n  \"barcode\": \"012000001628\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET organization-products-organizationProductId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organization-products/{{organizationProductId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organization-products",
                "{{organizationProductId}}"
              ]
            },
            "description": "Get organization product by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT organization-products-organizationProductId",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organization-products/{{organizationProductId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organization-products",
                "{{organizationProductId}}"
              ]
            },
            "description": "Update organization product"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE organization-products-organizationProductId",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organization-products/{{organizationProductId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organization-products",
                "{{organizationProductId}}"
              ]
            },
            "description": "Delete organization product"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 204', function () { pm.response.to.have.status(204); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET organization-products-category-category",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organization-products/category/{{category}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organization-products",
                "category",
                "{{category}}"
              ]
            },
            "description": "Get organization products by category"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET organization-products-brand-brand",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organization-products/brand/{{brand}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organization-products",
                "brand",
                "{{brand}}"
              ]
            },
            "description": "Get organization products by brand"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET organization-products-organization-orgId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/organization-products/organization/{{orgId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "organization-products",
                "organization",
                "{{orgId}}"
              ]
            },
            "description": "Get products for specific organization"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Assigned Products",
      "item": [
        {
          "name": "GET assigned-products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assigned-products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assigned-products"
              ]
            },
            "description": "Get all assigned products"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST assigned-products",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assigned-products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assigned-products"
              ]
            },
            "description": "Create assigned product",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"slotId\": \"slot-123456789\",\n  \"organizationProductId\": \"orgprod-123456789\",\n  \"qtyAssigned\": 10,\n  \"qtyCurrent\": 8,\n  \"qtyLowThreshold\": 3,\n  \"qtyAssignedAt\": \"2025-01-15T10:30:00.000Z\",\n  \"price\": 2.49,\n  \"currency\": \"USD\",\n  \"inventoryReport\": {},\n  \"notes\": \"Initial assignment\",\n  \"expirationDate\": \"2025-06-15T00:00:00.000Z\",\n  \"enabled\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET assigned-products-organization-orgId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assigned-products/organization/{{orgId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assigned-products",
                "organization",
                "{{orgId}}"
              ]
            },
            "description": "Get assigned products for organization"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET assigned-products-slot-slotId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assigned-products/slot/{{slotId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assigned-products",
                "slot",
                "{{slotId}}"
              ]
            },
            "description": "Get assigned product for slot"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST assigned-products-slot-slotId",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assigned-products/slot/{{slotId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assigned-products",
                "slot",
                "{{slotId}}"
              ]
            },
            "description": "Assign product to slot",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"organizationProductId\": \"orgprod-123456789\",\n  \"qtyAssigned\": 10,\n  \"qtyCurrent\": 8,\n  \"qtyLowThreshold\": 3,\n  \"qtyAssignedAt\": \"2025-01-15T10:30:00.000Z\",\n  \"price\": 2.49,\n  \"currency\": \"USD\",\n  \"inventoryReport\": {},\n  \"notes\": \"Slot-specific assignment\",\n  \"expirationDate\": \"2025-06-15T00:00:00.000Z\",\n  \"enabled\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT assigned-products-slot-slotId",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assigned-products/slot/{{slotId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assigned-products",
                "slot",
                "{{slotId}}"
              ]
            },
            "description": "Update assigned product"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PATCH assigned-products-slot-slotId",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assigned-products/slot/{{slotId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assigned-products",
                "slot",
                "{{slotId}}"
              ]
            },
            "description": "Partially update assigned product",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"qtyCurrent\": 5,\n  \"qtyAssignedAt\": \"2025-01-15T14:30:00.000Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE assigned-products-slot-slotId",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assigned-products/slot/{{slotId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "assigned-products",
                "slot",
                "{{slotId}}"
              ]
            },
            "description": "Remove product assignment from slot"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 204', function () { pm.response.to.have.status(204); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Published Catalogs",
      "item": [
        {
          "name": "GET published-catalogs-machineId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/published-catalogs/{{machineId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "published-catalogs",
                "{{machineId}}"
              ]
            },
            "description": "Get published catalog for machine"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST published-catalogs",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/published-catalogs",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "published-catalogs"
              ]
            },
            "description": "Publish catalog for machine",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"machineId\": \"0a240011-d248-4733-bb38-5cf93a1fb12b\",\n  \"organizationId\": \"970fc072-8588-4eb0-9eff-0a7aa8dcc2b6\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Notification Clients",
      "item": [
        {
          "name": "GET notification-clients",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-clients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-clients"
              ]
            },
            "description": "List notification clients"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST notification-clients",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-clients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-clients"
              ]
            },
            "description": "Create notification client",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"preferredChannel\": \"email\",\n  \"enabled\": true,\n  \"consent\": {\n    \"email\": true,\n    \"method\": \"web_form\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET notification-clients-id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-clients/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-clients",
                "{{id}}"
              ]
            },
            "description": "Get notification client"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT notification-clients-id",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-clients/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-clients",
                "{{id}}"
              ]
            },
            "description": "Update notification client",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newemail@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE notification-clients-id",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-clients/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-clients",
                "{{id}}"
              ]
            },
            "description": "Delete notification client"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 204', function () { pm.response.to.have.status(204); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST notification-clients-id-opt-out",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-clients/{{id}}/opt-out",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-clients",
                "{{id}}",
                "opt-out"
              ]
            },
            "description": "Opt out notification client",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"User no longer wants to receive notifications\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST notification-clients-id-opt-in",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-clients/{{id}}/opt-in",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-clients",
                "{{id}}",
                "opt-in"
              ]
            },
            "description": "Opt in notification client",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"consent_method\": \"admin_added\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Notification Subscriptions",
      "item": [
        {
          "name": "GET notification-subscriptions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-subscriptions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-subscriptions"
              ]
            },
            "description": "List notification subscriptions"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST notification-subscriptions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-subscriptions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-subscriptions"
              ]
            },
            "description": "Create notification subscription",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"storeId\": \"baf31c97-1804-47c4-b93c-9e654dbdcf92\",\n  \"notificationClientId\": \"nc-123456789\",\n  \"tags\": [\n    \"inventory_low\",\n    \"machine_error\"\n  ],\n  \"frequency\": \"immediate\",\n  \"enabled\": true,\n  \"metadata\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET notification-subscriptions-id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-subscriptions/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-subscriptions",
                "{{id}}"
              ]
            },
            "description": "Get notification subscription"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT notification-subscriptions-id",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-subscriptions/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-subscriptions",
                "{{id}}"
              ]
            },
            "description": "Update notification subscription",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"storeId\": \"baf31c97-1804-47c4-b93c-9e654dbdcf92\",\n  \"notificationClientId\": \"nc-123456789\",\n  \"tags\": [\n    \"inventory_low\"\n  ],\n  \"frequency\": \"daily\",\n  \"enabled\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE notification-subscriptions-id",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-subscriptions/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-subscriptions",
                "{{id}}"
              ]
            },
            "description": "Delete notification subscription"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 204', function () { pm.response.to.have.status(204); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST notification-subscriptions-id-enable",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-subscriptions/{{id}}/enable",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-subscriptions",
                "{{id}}",
                "enable"
              ]
            },
            "description": "Enable notification subscription"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST notification-subscriptions-id-disable",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notification-subscriptions/{{id}}/disable",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notification-subscriptions",
                "{{id}}",
                "disable"
              ]
            },
            "description": "Disable notification subscription"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Sales",
      "item": [
        {
          "name": "GET sales",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sales",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sales"
              ]
            },
            "description": "Get all sales receipts"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST sales",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sales",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sales"
              ]
            },
            "description": "Create a new sales receipt"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET sales-id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sales/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sales",
                "{{id}}"
              ]
            },
            "description": "Get sales receipt by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "IoT",
      "item": [
        {
          "name": "GET iot-config-id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/iot/config/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "iot",
                "config",
                "{{id}}"
              ]
            },
            "description": "Get machine configuration"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST iot-sales",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/iot/sales",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "iot",
                "sales"
              ]
            },
            "description": "Create sales receipt",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"organizationId\": \"org-123456789\",\n  \"machineId\": \"machine-123456789\",\n  \"total\": 5.47,\n  \"tax\": 0.47,\n  \"currency\": \"USD\",\n  \"recordedAt\": \"2025-01-15T14:30:00.000Z\",\n  \"payment\": {\n    \"method\": \"credit_card\",\n    \"cardType\": \"visa\",\n    \"last4\": \"1234\"\n  },\n  \"metadata\": {\n    \"transactionId\": \"txn_abc123\"\n  },\n  \"items\": [\n    {\n      \"organizationProductId\": \"org-prod-123\",\n      \"slotId\": \"slot-123456789\",\n      \"externalProductId\": \"prod-pepsi-355ml\",\n      \"unitPrice\": 2.49,\n      \"qty\": 2\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST iot-telemetry",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{apiKey}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/iot/telemetry",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "iot",
                "telemetry"
              ]
            },
            "description": "Create telemetry event",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"organizationId\": \"org-123456789\",\n  \"machineId\": \"machine-123456789\",\n  \"eventType\": \"door_opened\",\n  \"recordedAt\": \"2025-01-15T14:30:00.000Z\",\n  \"metadata\": {\n    \"duration\": 15,\n    \"location\": \"front_door\",\n    \"temperature\": 4.2\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Status < 400', function () { pm.expect(pm.response.code).to.be.below(400); });"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    },
    {
      "key": "apiKey",
      "value": "REPLACE_ME"
    },
    {
      "key": "jwt",
      "value": ""
    },
    {
      "key": "orgId",
      "value": ""
    }
  ]
}