openapi: 3.0.3
info:
  title: Vendistax Backend API - Complete Documentation
  version: 1.7.1
  description: |-
    # Vendistax Backend API

    Complete API documentation for all Vendistax services.

    Generated on: 2025-10-14T19:59:58.483Z

    ## Available APIs:
    - **Users** - User management and authentication
    - **API Keys** - API key and OTP management
    - **Organizations** - Organization and resource management  
    - **Stores** - Store location management
    - **Machines** - Vending machine management
    - **Slots** - Machine slot management and configuration
    - **Doors** - Door hardware management and control
    - **IoT Device** - Device-to-server communication
    - **Organization Products** - Organization-specific products available to assign/vend in a machine
    - **Assigned Products** - Product assignments to specific machine slots
    - **Notification Clients** - Alert and notification recipient management
    - **Notification Subscriptions** - Subscription event management for notifications
    - **Sales** - Sales transaction recording and analytics

    ## Organization Access:
    - Organization, Store, machine, slot, etc. ('config' related) endpoints enforce organization-level permissions
    - Users can only access resources they have permissions for

    ## IoT Device Communication:
    - IoT endpoints use device-specific API keys for authentication
    - Ensure devices are registered and have a valid API key in the system before sending data
    - All endpoints require API key authentication via the `X-API-Key` and `X-Device-ID` headers.
        
servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.vendistax.com/api/v1
    description: Production server
security:
  - ApiKeyAuth: []
    DeviceKeyAuth: []
tags: []
paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Create a new user account with email, password, and organization assignment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationInput'
            example:
              email: user@example.com
              password: SecurePassword123!
              organizationId: org-123456789
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
              example:
                success: true
                user:
                  userId: usr_1234567890abcdef
                  organizationId: org-123456789
                  email: user@example.com
                  role: user
                  isActive: true
                  createdAt: '2025-01-15T10:30:00.000Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email already registered
              example:
                error: Email already registered
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/login:
    post:
      tags:
        - Users
      summary: User login with credentials
      description: |
        Authenticate user with email and password. 
        Returns JWT token on successful authentication.
        Implements account lockout after failed attempts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
            example:
              email: user@example.com
              password: SecurePassword123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: JWT token for authentication
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  authMethod:
                    type: string
                    example: password
              example:
                success: true
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c3JfMTIzNDU2Nzg5MGFiY2RlZiIsImVtYWlsIjoidXNlckBleGFtcGxlLmNvbSIsIm9yZ2FuaXphdGlvbklkIjoib3JnLTEyMzQ1Njc4OSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM3MDI0NjAwLCJleHAiOjE3MzcxMTEwMDB9.example-signature
                authMethod: password
        '400':
          description: Bad request - Missing email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email and password are required
              example:
                error: Email and password are required
        '401':
          description: Invalid credentials or account disabled
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Invalid credentials
                      remainingAttempts:
                        type: integer
                        description: Number of attempts remaining before lockout
                        example: 2
                      message:
                        type: string
                        example: Invalid credentials. 2 attempts remaining before lockout.
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Invalid credentials
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Account is disabled
              examples:
                invalidCredentialsWithAttempts:
                  summary: Invalid credentials with remaining attempts
                  value:
                    error: Invalid credentials
                    remainingAttempts: 2
                    message: Invalid credentials. 2 attempts remaining before lockout.
                invalidCredentials:
                  summary: Invalid credentials
                  value:
                    error: Invalid credentials
                accountDisabled:
                  summary: Account is disabled
                  value:
                    error: Account is disabled
        '423':
          description: Account is locked due to too many failed attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Account is locked
                  lockoutMinutes:
                    type: integer
                    description: Minutes remaining until account is unlocked
                    example: 15
                  message:
                    type: string
                    example: Account locked. Try again in 15 minutes.
              example:
                error: Account is locked
                lockoutMinutes: 15
                message: Account locked. Try again in 15 minutes.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/login/api-key:
    post:
      tags:
        - Users
      summary: Exchange API key for JWT token
      description: |
        Exchange a valid API key for a JWT token.
        Used for service-to-service authentication or when users want to get a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyLoginInput'
            example:
              apiKey: ak_1234567890abcdef
      responses:
        '200':
          description: API key exchange successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c3JfMTIzNDU2Nzg5MGFiY2RlZiIsImVtYWlsIjoidXNlckBleGFtcGxlLmNvbSIsIm9yZ2FuaXphdGlvbklkIjoib3JnLTEyMzQ1Njc4OSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM3MDI0NjAwLCJleHAiOjE3MzcxMTEwMDB9.example-signature
        '400':
          description: API key is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: API key is required
              example:
                error: API key is required
        '401':
          description: Invalid, revoked, expired, or no valid API key
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - Invalid API key
                      - API key has been revoked
                      - API key has expired
                      - No valid API keys found
              examples:
                invalidApiKey:
                  summary: Invalid API key
                  value:
                    error: Invalid API key
                revokedApiKey:
                  summary: API key has been revoked
                  value:
                    error: API key has been revoked
                expiredApiKey:
                  summary: API key has expired
                  value:
                    error: API key has expired
                noValidApiKeys:
                  summary: No valid API keys found
                  value:
                    error: No valid API keys found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/lockout-status/{email}:
    get:
      tags:
        - Users
      summary: Get user lockout status
      description: |
        Check if a user account is locked and get lockout details.
        This is a public endpoint for checking lockout status.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          description: User email address
          example: user@example.com
      responses:
        '200':
          description: Lockout status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  lockoutStatus:
                    type: object
                    description: Lockout status information
                    properties:
                      isLocked:
                        type: boolean
                        description: Whether the account is currently locked
                      lockoutMinutes:
                        type: integer
                        description: Minutes remaining until unlock (if locked)
                        nullable: true
                      failedAttempts:
                        type: integer
                        description: Number of failed login attempts
              example:
                success: true
                lockoutStatus:
                  isLocked: true
                  lockoutMinutes: 15
                  failedAttempts: 5
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
              example:
                error: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/api-key:
    get:
      tags:
        - API Keys
      summary: List API keys
      description: |
        Get a paginated list of API keys for the authenticated organization.
        Only returns keys belonging to the user's organization.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of API keys to return (max 100, default 50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 10
        - name: offset
          in: query
          description: Number of API keys to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKeys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
                    description: List of API keys
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                apiKeys:
                  - keyId: key-123456789
                    description: Production API Key
                    organizationId: org-123456789
                    machineId: null
                    isRoot: true
                    createdAt: '2025-01-15T10:30:00.000Z'
                    lastUsedAt: '2025-01-15T14:30:00.000Z'
                    expiresAt: null
                    revokedAt: null
                  - keyId: key-987654321
                    description: Machine Key - NIC-U
                    organizationId: org-123456789
                    machineId: machine-123456789
                    isRoot: false
                    createdAt: '2025-01-14T09:15:00.000Z'
                    lastUsedAt: '2025-01-15T13:45:00.000Z'
                    expiresAt: null
                    revokedAt: null
                pagination:
                  total: 2
                  limit: 50
                  offset: 0
                  hasMore: false
        '500':
          description: Failed to retrieve API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to retrieve API keys
    post:
      tags:
        - API Keys
      summary: Create API key
      description: |
        Create a new API key. Only root API keys can create new keys.
        Machine keys are tied to a specific machine, while organization keys are for general use.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
            examples:
              rootOrganizationKey:
                summary: Root Organization API Key
                description: A root key that can manage the entire organization
                value:
                  description: Production Management API Key
                  organizationId: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
                  isRoot: true
              machineKey:
                summary: Machine-Specific API Key
                description: A machine key tied to a specific vending machine
                value:
                  description: Machine Key - NIC-U Medical Locker
                  organizationId: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
                  machineId: 0a240011-d248-4733-bb38-5cf93a1fb12b
                  isRoot: false
              basicOrganizationKey:
                summary: Basic Organization API Key
                description: A non-root key for general organization operations
                value:
                  description: Analytics Dashboard API Key
                  organizationId: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
                  isRoot: false
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: API key created successfully
                  apiKey:
                    $ref: '#/components/schemas/ApiKey'
                  keyValue:
                    type: string
                    description: The actual API key value (only returned on creation)
                    example: ak_1234567890abcdef1234567890abcdef
        '400':
          description: Invalid input or machine key already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                machineKeyExists:
                  summary: Machine key already exists
                  value:
                    error: API key already exists for this machine
                validationError:
                  summary: Validation error
                  value:
                    error: isRoot cannot be true when machineId is set
        '403':
          description: Only root API keys can create new keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Only root API keys can create new keys
        '404':
          description: Machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Machine not found
        '500':
          description: Failed to create API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to create API key and MQTT credentials
  /auth/api-key/current:
    get:
      tags:
        - API Keys
      summary: Get current API key information
      description: Get information about the currently authenticated API key.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Current API key information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Current API key information
                  keyId:
                    type: string
                    example: key-123456789
                  description:
                    type: string
                    example: Production API Key
                  organizationId:
                    type: string
                    nullable: true
                    example: org-123456789
                  machineId:
                    type: string
                    nullable: true
                    example: null
                  isRoot:
                    type: boolean
                    example: true
                  createdAt:
                    type: string
                    format: date-time
                    example: '2025-01-15T10:30:00.000Z'
                  lastUsedAt:
                    type: string
                    format: date-time
                    nullable: true
                    example: '2025-01-15T14:30:00.000Z'
                  expiresAt:
                    type: string
                    format: date-time
                    nullable: true
                    example: null
                  revokedAt:
                    type: string
                    format: date-time
                    nullable: true
                    example: null
        '500':
          description: Failed to fetch API key information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to fetch API key information
  /auth/api-key/{id}:
    delete:
      tags:
        - API Keys
      summary: Delete API key
      description: |
        Permanently delete an API key. Only root API keys can delete keys.
        Cannot delete your own API key.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: API key ID to delete
          example: key-123456789
      responses:
        '200':
          description: API key deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: API key deleted successfully
        '400':
          description: Cannot delete your own API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Cannot delete your own API key
        '403':
          description: Only root API keys can delete keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Only root API keys can delete keys
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: API key not found
        '500':
          description: Failed to delete API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to delete API key
  /auth/api-key/{id}/revoke:
    put:
      tags:
        - API Keys
      summary: Revoke API key
      description: |
        Revoke an API key, making it unusable. Only root API keys can revoke keys.
        Cannot revoke your own API key. Revoked keys can be restored.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: API key ID to revoke
          example: key-123456789
      responses:
        '200':
          description: API key revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: API key revoked successfully
        '400':
          description: Cannot revoke your own API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Cannot revoke your own API key
        '403':
          description: Only root API keys can revoke keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Only root API keys can revoke keys
        '404':
          description: API key not found or already revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: API key not found or already revoked
        '500':
          description: Failed to revoke API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to revoke API key
  /auth/api-key/{id}/restore:
    put:
      tags:
        - API Keys
      summary: Restore API key
      description: |
        Restore a previously revoked API key. Only root API keys can restore keys.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: API key ID to restore
          example: key-123456789
      responses:
        '200':
          description: API key restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: API key restored successfully
        '403':
          description: Only root API keys can restore keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Only root API keys can restore keys
        '404':
          description: API key not found or not revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: API key not found or not revoked
        '500':
          description: Failed to restore API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to restore API key
  /auth/otp:
    post:
      tags:
        - OTP
      summary: Create OTP code
      description: |
        Create a one-time password (OTP) code for secure access.
        Requires API key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOtpInput'
            example:
              expiresInMinutes: 30
              description: Dashboard access token
      responses:
        '201':
          description: OTP created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP created successfully
                  otpCode:
                    type: string
                    example: ABC123DEF
                  expiresAt:
                    type: string
                    format: date-time
                    example: '2025-01-15T15:30:00.000Z'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Invalid input data
        '500':
          description: Failed to create OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to create OTP
  /auth/otp/{otp_code}:
    get:
      tags:
        - OTP
      summary: Get OTP information
      description: |
        Get information about an OTP code.
        Requires API key authentication.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: otp_code
          in: path
          required: true
          schema:
            type: string
          description: OTP code to look up
          example: ABC123DEF
      responses:
        '200':
          description: OTP information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpInfo'
        '404':
          description: OTP not found or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: OTP not found or expired
        '500':
          description: Failed to retrieve OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to retrieve OTP
  /auth/otp/redeem:
    post:
      tags:
        - OTP
      summary: Redeem OTP code
      description: |
        Redeem a one-time password code for access.
        This endpoint does NOT require API key authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedeemOtpInput'
            example:
              otpCode: ABC123DEF
      responses:
        '200':
          description: OTP redeemed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP redeemed successfully
                  token:
                    type: string
                    description: Access token or other redemption result
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Invalid or expired OTP
        '404':
          description: OTP not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: OTP not found
        '500':
          description: Failed to redeem OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to redeem OTP
  /auth/dashboard-token:
    post:
      tags:
        - Dashboard
      summary: Get dashboard access token
      description: |
        Get a guest token for dashboard access (e.g., Superset).
        Requires API key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardTokenInput'
            example:
              organizationId: org-123456789
      responses:
        '200':
          description: Dashboard token retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Dashboard access token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  expiresAt:
                    type: string
                    format: date-time
                    example: '2025-01-15T16:30:00.000Z'
        '400':
          description: Organization ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Organization ID is required
        '404':
          description: Organization not found or not configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Organization was not found or not configured
        '500':
          description: Dashboard not properly configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Dashboard is not properly configured
        '502':
          description: Dashboard service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                loginFailed:
                  summary: Dashboard login failed
                  value:
                    error: Failed to authenticate with Dashboard
                tokenFailed:
                  summary: Guest token failed
                  value:
                    error: Failed to obtain guest token from Dashboard
  /organizations:
    get:
      tags:
        - Organizations
      summary: Get all organizations
      description: |
        Returns a paginated list of organizations. 
        - Root users can see all organizations
        - Non-root users can only see their assigned organization
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of organizations to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of organizations to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied - no organization assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Organizations
      summary: Create a new organization
      description: Create a new organization. Only root users can create organizations.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Organization created
                  organization:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Forbidden - only root users can create organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Get organization by ID
      description: Get a specific organization by ID. Users can only access organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Organization ID (UUID)
      responses:
        '200':
          description: Organization retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Organizations
      summary: Update organization by ID
      description: Update an existing organization. Users can only update organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Organization ID (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Organization updated
                  organization:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Organizations
      summary: Delete organization by ID
      description: |
        Delete an organization. Only root users can delete organizations.
        Organization cannot be deleted if it has dependent records (stores, machines, API keys).
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Organization ID (UUID)
      responses:
        '200':
          description: Organization deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Organization deleted
        '400':
          description: Cannot delete organization with dependent records
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Cannot delete organization with dependent records
                  details:
                    type: object
                    description: Details about dependent records
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Forbidden - only root users can delete organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations/{id}/stores:
    get:
      tags:
        - Organizations
      summary: Get stores for organization
      description: Get a paginated list of stores belonging to the specified organization.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Organization ID (UUID)
        - name: limit
          in: query
          description: Maximum number of stores to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of stores to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Stores retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  stores:
                    type: array
                    items:
                      $ref: '#/components/schemas/Store'
                  organizationId:
                    type: string
                    description: The organization ID
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations/{id}/machines:
    get:
      tags:
        - Organizations
      summary: Get machines for organization
      description: Get a paginated list of vending machines belonging to the specified organization.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Organization ID (UUID)
        - name: limit
          in: query
          description: Maximum number of machines to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of machines to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Machines retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  machines:
                    type: array
                    items:
                      $ref: '#/components/schemas/Machine'
                  organizationId:
                    type: string
                    description: The organization ID
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations/{id}/notification-clients:
    get:
      tags:
        - Organizations
      summary: Get notification clients for organization
      description: Get a paginated list of notification clients belonging to the specified organization.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Organization ID (UUID)
        - name: limit
          in: query
          description: Maximum number of notification clients to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of notification clients to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Notification clients retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  notificationClients:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationClient'
                  organizationId:
                    type: string
                    description: The organization ID
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /stores:
    get:
      tags:
        - Stores
      summary: Get all stores
      description: |
        Returns a paginated list of stores.
        Users can only see stores from organizations they have access to.
        Supports optional filtering by search term and status.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of stores to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of stores to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: search
          in: query
          description: Search term for filtering stores by name or description
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter stores by status
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Stores retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  stores:
                    type: array
                    items:
                      $ref: '#/components/schemas/Store'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Stores
      summary: Create a new store
      description: Create a new store. Users can only create stores within organizations they have access to.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInput'
      responses:
        '201':
          description: Store created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Store created
                  store:
                    $ref: '#/components/schemas/Store'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /stores/{id}:
    get:
      tags:
        - Stores
      summary: Get store by ID
      description: Get a specific store by ID. Users can only access stores from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Store ID
      responses:
        '200':
          description: Store retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Store not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Stores
      summary: Update store by ID
      description: Update an existing store. Users can only update stores from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Store ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInput'
      responses:
        '200':
          description: Store updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Store updated
                  store:
                    $ref: '#/components/schemas/Store'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Store not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Stores
      summary: Delete store by ID
      description: |
        Delete a store. Users can only delete stores from organizations they have permission for.
        Store cannot be deleted if it has dependent records (machines, etc.).
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Store ID
      responses:
        '200':
          description: Store deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Store deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Store not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Cannot delete store with dependent records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /stores/{id}/machines:
    get:
      tags:
        - Stores
      summary: Get machines for store
      description: Get a paginated list of vending machines belonging to the specified store.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Store ID
        - name: limit
          in: query
          description: Maximum number of machines to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of machines to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Machines retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  machines:
                    type: array
                    items:
                      $ref: '#/components/schemas/Machine'
                  storeId:
                    type: string
                    description: The store ID
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Store not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /machines:
    get:
      tags:
        - Machines
      summary: Get all machines
      description: |
        Returns a paginated list of machines with their current status.
        Users can only see machines from organizations they have access to.
        Supports optional filtering by store ID, status, and search term.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of machines to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of machines to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: store_id
          in: query
          description: Filter machines by store ID
          required: false
          schema:
            type: string
          example: store-123456789
        - name: status
          in: query
          description: Filter machines by status
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Search term for filtering machines by name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Machines retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  machines:
                    type: array
                    items:
                      $ref: '#/components/schemas/Machine'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                machines:
                  - machineId: machine-123456789
                    organizationId: org-123456789
                    storeId: store-123456789
                    name: VM-001 Main Entrance
                    model: VendMax Pro 2000
                    serialNumber: VM2000-2024-001
                    location:
                      description: Near main entrance
                      floor: 1
                      indoor: true
                    metadata:
                      installationDate: '2024-01-15'
                      warranty: 2 years
                    status:
                      status: online
                      lastUpdate: '2025-01-15T10:30:00.000Z'
                      lastUpdateTs: 1737024600000
                      isOnline: true
                      isStale: false
                    lastHeartbeatAt: '2025-01-15T10:30:00.000Z'
                    images: []
                  - machineId: machine-987654321
                    organizationId: org-123456789
                    storeId: store-123456789
                    name: VM-002 Cafeteria
                    model: VendMax Pro 2000
                    serialNumber: VM2000-2024-002
                    location:
                      description: Main cafeteria
                      floor: 2
                      indoor: true
                    metadata:
                      installationDate: '2024-02-01'
                    status:
                      status: unknown
                      lastUpdate: '2025-01-15T09:45:00.000Z'
                      lastUpdateTs: 1737021900000
                      isOnline: false
                      isStale: true
                    lastHeartbeatAt: '2025-01-15T09:45:00.000Z'
                    images: []
                pagination:
                  limit: 50
                  offset: 0
                  total: 150
                  hasMore: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Machines
      summary: Create a new machine
      description: Create a new machine. Users can only create machines within organizations they have access to.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineInput'
            example:
              storeId: store-123456789
              name: VM-002 Cafeteria
              model: VendMax Pro 2000
              serialNumber: VM2000-2024-002
              location:
                description: Main cafeteria, near coffee station
                floor: 2
                indoor: true
              metadata:
                installationDate: '2025-01-15'
                warranty: 2 years
                technician: John Smith
              images: []
      responses:
        '201':
          description: Machine created successfully (no status included for new machines)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Machine created
                  machine:
                    $ref: '#/components/schemas/MachineWithoutStatus'
              example:
                message: Machine created
                machine:
                  machineId: machine-123456789
                  organizationId: org-123456789
                  storeId: store-123456789
                  name: VM-002 Cafeteria
                  model: VendMax Pro 2000
                  serialNumber: VM2000-2024-002
                  location:
                    description: Main cafeteria, near coffee station
                    floor: 2
                    indoor: true
                  metadata:
                    installationDate: '2025-01-15'
                    warranty: 2 years
                    technician: John Smith
                  images: []
        '400':
          description: Bad request - Invalid input data or store not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidInput:
                  summary: Invalid input data
                  value:
                    error: Invalid input data
                storeNotFound:
                  summary: Store not found
                  value:
                    error: STORE_NOT_FOUND
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /machines/{id}:
    get:
      tags:
        - Machines
      summary: Get machine by ID
      description: Get a specific machine by ID. Users can only access machines from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Machine ID
          example: machine-123456789
      responses:
        '200':
          description: Machine retrieved successfully (no status included in individual machine response)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineWithoutStatus'
              example:
                machineId: machine-123456789
                organizationId: org-123456789
                storeId: store-123456789
                name: VM-001 Main Entrance
                model: VendMax Pro 2000
                serialNumber: VM2000-2024-001
                location:
                  description: Near main entrance
                  floor: 1
                  indoor: true
                metadata:
                  installationDate: '2024-01-15'
                  warranty: 2 years
                  lastMaintenance: '2024-07-01'
                lastHeartbeatAt: '2025-01-15T10:30:00.000Z'
                images: []
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Machines
      summary: Update machine by ID
      description: Update an existing machine. Users can only update machines from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Machine ID
          example: machine-123456789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineInput'
            example:
              storeId: store-123456789
              name: VM-001 Main Entrance Updated
              model: VendMax Pro 2000
              serialNumber: VM2000-2024-001
              location:
                description: Moved to near elevator bank
                floor: 1
                indoor: true
              metadata:
                installationDate: '2024-01-15'
                warranty: 2 years
                lastMaintenance: '2025-01-15'
              images: []
      responses:
        '200':
          description: Machine updated successfully (no status included in update response)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Machine updated
                  machine:
                    $ref: '#/components/schemas/MachineWithoutStatus'
              example:
                message: Machine updated
                machine:
                  machineId: machine-123456789
                  organizationId: org-123456789
                  storeId: store-123456789
                  name: VM-001 Main Entrance Updated
                  model: VendMax Pro 2000
                  serialNumber: VM2000-2024-001
                  location:
                    description: Moved to near elevator bank
                    floor: 1
                    indoor: true
                  metadata:
                    installationDate: '2024-01-15'
                    warranty: 2 years
                    lastMaintenance: '2025-01-15'
                  images: []
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Machines
      summary: Delete machine by ID
      description: |
        Delete a machine. Users can only delete machines from organizations they have permission for.
        Machine cannot be deleted if it has dependent records.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Machine ID
          example: machine-123456789
      responses:
        '200':
          description: Machine deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Machine deleted
              example:
                message: Machine deleted
        '400':
          description: Cannot delete machine with dependent records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: DEPENDENTS_EXIST
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /machines/{id}/slots:
    get:
      tags:
        - Machines
      summary: Get slots for machine
      description: Get a paginated list of slots belonging to the specified machine.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Machine ID
          example: machine-123456789
        - name: limit
          in: query
          description: Maximum number of slots to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of slots to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Slots retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    items:
                      $ref: '#/components/schemas/Slot'
                  machineId:
                    type: string
                    description: The machine ID
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                slots:
                  - id: slot-123456789
                    organizationId: org-123456789
                    machineId: machine-123456789
                    enabled: true
                    hardwareId: A1
                    productSensor: true
                    label: Row A, Column 1 - Beverages
                    type: cooled
                    position:
                      row: 1
                      column: 1
                    dimensions:
                      height: 15.5
                      width: 12
                      length: 8.5
                      unit: cm
                    metadata:
                      temperatureRange: 2-8°C
                      capacity: 10
                    doors: []
                    createdAt: '2025-01-15T10:30:00.000Z'
                    updatedAt: '2025-01-15T10:30:00.000Z'
                machineId: machine-123456789
                pagination:
                  limit: 50
                  offset: 0
                  total: 30
                  hasMore: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /machines/{id}/assigned-products:
    get:
      tags:
        - Machines
      summary: Get assigned products for machine
      description: Get a paginated list of products assigned to slots in the specified machine.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Machine ID
          example: machine-123456789
        - name: limit
          in: query
          description: Maximum number of assigned products to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of assigned products to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Assigned products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  assignedProducts:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignedProduct'
                  machineId:
                    type: string
                    description: The machine ID
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                assignedProducts:
                  - id: assignment-123456789
                    slotId: slot-123456789
                    productId: prod-pepsi-max-355ml
                    name: Pepsi Max
                    brand: PepsiCo
                    category: beverage
                    price: 2.49
                    currency: USD
                    currentStock: 8
                    maxCapacity: 10
                    lowStockThreshold: 3
                    position:
                      row: 1
                      column: 1
                    createdAt: '2025-01-15T10:30:00.000Z'
                    updatedAt: '2025-01-15T10:30:00.000Z'
                machineId: machine-123456789
                pagination:
                  limit: 50
                  offset: 0
                  total: 25
                  hasMore: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /slots:
    get:
      tags:
        - Slots
      summary: Get all slots
      description: |
        Returns a paginated list of slots.
        Users can only see slots from organizations they have access to.
        Supports optional filtering by machine ID.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of slots to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of slots to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: machine_id
          in: query
          description: Filter slots by machine ID
          required: false
          schema:
            type: string
          example: machine-123456789
      responses:
        '200':
          description: Slots retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    items:
                      $ref: '#/components/schemas/Slot'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                slots:
                  - id: slot-123456789
                    organizationId: org-123456789
                    machineId: machine-123456789
                    enabled: true
                    hardwareId: A1
                    productSensor: true
                    label: Row A, Column 1 - Beverages
                    type: cooled
                    position:
                      row: 1
                      column: 1
                    dimensions:
                      height: 15.5
                      width: 12
                      length: 8.5
                      unit: cm
                    metadata:
                      temperatureRange: 2-8°C
                      capacity: 10
                    doors:
                      - id: door-123456789
                        organizationId: org-123456789
                        slotId: slot-123456789
                        enabled: true
                        motorized: true
                        orientation: front
                        hardwareId: MOTOR_A1
                        position:
                          row: 1
                          column: 1
                        metadata:
                          openDuration: 3000
                    createdAt: '2025-01-15T10:30:00.000Z'
                    updatedAt: '2025-01-15T10:30:00.000Z'
                pagination:
                  limit: 50
                  offset: 0
                  total: 150
                  hasMore: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Slots
      summary: Create a new slot
      description: Create a new slot. Users can only create slots within organizations they have access to.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotInput'
            example:
              machineId: machine-123456789
              enabled: true
              hardwareId: A1
              productSensor: true
              label: Row A, Column 1 - Beverages
              type: cooled
              position:
                row: 1
                column: 1
              dimensions:
                height: 15.5
                width: 12
                length: 8.5
                unit: cm
              metadata:
                temperatureRange: 2-8°C
                capacity: 10
      responses:
        '201':
          description: Slot created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Slot created
                  slot:
                    $ref: '#/components/schemas/Slot'
              example:
                message: Slot created
                slot:
                  id: slot-123456789
                  organizationId: org-123456789
                  machineId: machine-123456789
                  enabled: true
                  hardwareId: A1
                  productSensor: true
                  label: Row A, Column 1 - Beverages
                  type: cooled
                  position:
                    row: 1
                    column: 1
                  dimensions:
                    height: 15.5
                    width: 12
                    length: 8.5
                    unit: cm
                  metadata:
                    temperatureRange: 2-8°C
                    capacity: 10
                  doors: []
                  createdAt: '2025-01-15T10:30:00.000Z'
                  updatedAt: '2025-01-15T10:30:00.000Z'
        '400':
          description: Bad request - Invalid input data or machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidInput:
                  summary: Invalid input data
                  value:
                    error: Invalid input data
                machineNotFound:
                  summary: Machine not found
                  value:
                    error: MACHINE_NOT_FOUND
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /slots/{id}:
    get:
      tags:
        - Slots
      summary: Get slot by ID
      description: Get a specific slot by ID. Users can only access slots from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
      responses:
        '200':
          description: Slot retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
              example:
                id: slot-123456789
                organizationId: org-123456789
                machineId: machine-123456789
                enabled: true
                hardwareId: A1
                productSensor: true
                label: Row A, Column 1 - Beverages
                type: cooled
                position:
                  row: 1
                  column: 1
                dimensions:
                  height: 15.5
                  width: 12
                  length: 8.5
                  unit: cm
                metadata:
                  temperatureRange: 2-8°C
                  capacity: 10
                doors:
                  - id: door-123456789
                    organizationId: org-123456789
                    slotId: slot-123456789
                    enabled: true
                    motorized: true
                    orientation: front
                    hardwareId: MOTOR_A1
                    position:
                      row: 1
                      column: 1
                    metadata:
                      openDuration: 3000
                createdAt: '2025-01-15T10:30:00.000Z'
                updatedAt: '2025-01-15T10:30:00.000Z'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Slot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Slots
      summary: Update slot by ID
      description: Update an existing slot. Users can only update slots from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotInput'
            example:
              machineId: machine-123456789
              enabled: false
              hardwareId: A1-updated
              productSensor: true
              label: Row A, Column 1 - Premium Beverages
              type: heated
              position:
                row: 1
                column: 1
              dimensions:
                height: 18
                width: 14
                length: 10
                unit: cm
              metadata:
                temperatureRange: 60-80°C
                capacity: 8
      responses:
        '200':
          description: Slot updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Slot updated
                  slot:
                    $ref: '#/components/schemas/Slot'
              example:
                message: Slot updated
                slot:
                  id: slot-123456789
                  organizationId: org-123456789
                  machineId: machine-123456789
                  enabled: false
                  hardwareId: A1-updated
                  productSensor: true
                  label: Row A, Column 1 - Premium Beverages
                  type: heated
                  position:
                    row: 1
                    column: 1
                  dimensions:
                    height: 18
                    width: 14
                    length: 10
                    unit: cm
                  metadata:
                    temperatureRange: 60-80°C
                    capacity: 8
                  doors: []
                  createdAt: '2025-01-15T10:30:00.000Z'
                  updatedAt: '2025-01-15T11:30:00.000Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Slot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Slots
      summary: Delete slot by ID
      description: |
        Delete a slot. Users can only delete slots from organizations they have permission for.
        Slot cannot be deleted if it has dependent records.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
      responses:
        '200':
          description: Slot deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Slot deleted
              example:
                message: Slot deleted
        '400':
          description: Cannot delete slot with dependent records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: DEPENDENTS_EXIST
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Slot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /slots/{id}/doors:
    get:
      tags:
        - Slots
      summary: Get doors for slot
      description: Get a paginated list of doors belonging to the specified slot.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
        - name: limit
          in: query
          description: Maximum number of doors to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of doors to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Doors retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  doors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Door'
                  slotId:
                    type: string
                    description: The slot ID
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                doors:
                  - id: door-123456789
                    organizationId: org-123456789
                    slotId: slot-123456789
                    enabled: true
                    motorized: true
                    orientation: front
                    hardwareId: MOTOR_A1
                    position:
                      row: 1
                      column: 1
                    metadata:
                      openDuration: 3000
                slotId: slot-123456789
                pagination:
                  limit: 50
                  offset: 0
                  total: 1
                  hasMore: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Slot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /slots/{id}/inventory:
    patch:
      tags:
        - Slots
      summary: Update slot inventory
      description: |
        Update the current inventory count for a slot. This is typically used
        for manual inventory adjustments or restocking operations.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 0
                  description: New inventory quantity
                  example: 8
              required:
                - quantity
            example:
              quantity: 8
      responses:
        '200':
          description: Slot inventory updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Slot inventory updated
                  slot:
                    $ref: '#/components/schemas/Slot'
              example:
                message: Slot inventory updated
                slot:
                  id: slot-123456789
                  organizationId: org-123456789
                  machineId: machine-123456789
                  enabled: true
                  hardwareId: A1
                  productSensor: true
                  label: Row A, Column 1 - Beverages
                  type: cooled
                  position:
                    row: 1
                    column: 1
                  dimensions:
                    height: 15.5
                    width: 12
                    length: 8.5
                    unit: cm
                  metadata:
                    temperatureRange: 2-8°C
                    capacity: 10
                    currentQuantity: 8
                  doors: []
                  createdAt: '2025-01-15T10:30:00.000Z'
                  updatedAt: '2025-01-15T12:30:00.000Z'
        '400':
          description: Bad request - invalid quantity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Invalid quantity
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Slot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /doors:
    get:
      tags:
        - Doors
      summary: Get all doors
      description: |
        Returns a paginated list of doors.
        Users can only see doors from organizations they have access to.
        Supports optional filtering by slot ID and status.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of doors to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of doors to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: slot_id
          in: query
          description: Filter doors by slot ID
          required: false
          schema:
            type: string
          example: slot-123456789
        - name: status
          in: query
          description: Filter doors by status
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Doors retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  doors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Door'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                doors:
                  - id: door-123456789
                    organizationId: org-123456789
                    slotId: slot-123456789
                    enabled: true
                    motorized: false
                    orientation: front
                    hardwareId: hw-door-001
                    position:
                      row: 1
                      column: 2
                    metadata: {}
                pagination:
                  limit: 50
                  offset: 0
                  total: 150
                  hasMore: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Doors
      summary: Create a new door
      description: Create a new door. Users can only create doors within organizations they have access to.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoorInput'
            example:
              slotId: slot-123456789
              enabled: true
              motorized: false
              orientation: front
              hardwareId: hw-door-001
              position:
                row: 1
                column: 2
              metadata: {}
      responses:
        '201':
          description: Door created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Door created
                  door:
                    $ref: '#/components/schemas/Door'
              example:
                message: Door created
                door:
                  id: door-123456789
                  organizationId: org-123456789
                  slotId: slot-123456789
                  enabled: true
                  motorized: false
                  orientation: front
                  hardwareId: hw-door-001
                  position:
                    row: 1
                    column: 2
                  metadata: {}
        '400':
          description: Bad request - Invalid input data or slot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidInput:
                  summary: Invalid input data
                  value:
                    error: Invalid input data
                slotNotFound:
                  summary: Slot not found
                  value:
                    error: SLOT_NOT_FOUND
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /doors/{id}:
    get:
      tags:
        - Doors
      summary: Get door by ID
      description: Get a specific door by ID. Users can only access doors from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Door ID
          example: door-123456789
      responses:
        '200':
          description: Door retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Door'
              example:
                id: door-123456789
                organizationId: org-123456789
                slotId: slot-123456789
                enabled: true
                motorized: false
                orientation: front
                hardwareId: hw-door-001
                position:
                  row: 1
                  column: 2
                metadata: {}
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Door not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Doors
      summary: Update door by ID
      description: Update an existing door. Users can only update doors from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Door ID
          example: door-123456789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoorInput'
            example:
              slotId: slot-123456789
              enabled: true
              motorized: true
              orientation: rear
              hardwareId: hw-door-001-updated
              position:
                row: 1
                column: 2
              metadata:
                lastMaintenance: '2025-01-15'
      responses:
        '200':
          description: Door updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Door updated
                  door:
                    $ref: '#/components/schemas/Door'
              example:
                message: Door updated
                door:
                  id: door-123456789
                  organizationId: org-123456789
                  slotId: slot-123456789
                  enabled: true
                  motorized: true
                  orientation: rear
                  hardwareId: hw-door-001-updated
                  position:
                    row: 1
                    column: 2
                  metadata:
                    lastMaintenance: '2025-01-15'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Door not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Doors
      summary: Delete door by ID
      description: |
        Delete a door. Users can only delete doors from organizations they have permission for.
        Door cannot be deleted if it has dependent records.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Door ID
          example: door-123456789
      responses:
        '200':
          description: Door deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Door deleted
              example:
                message: Door deleted
        '400':
          description: Cannot delete door with dependent records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: DEPENDENTS_EXIST
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Door not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /doors/{id}/lock:
    post:
      tags:
        - Doors
      summary: Lock door
      description: |
        Lock a specific door. This is a hardware operation for motorized doors.
        Users can only lock doors from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Door ID
          example: door-123456789
      responses:
        '200':
          description: Door locked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Door locked
                  result:
                    type: object
                    description: Lock operation result
              example:
                message: Door locked
                result:
                  status: locked
                  timestamp: '2025-01-15T10:30:00.000Z'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Door not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /doors/{id}/unlock:
    post:
      tags:
        - Doors
      summary: Unlock door
      description: |
        Unlock a specific door. This is a hardware operation for motorized doors.
        Users can only unlock doors from organizations they have permission for.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Door ID
          example: door-123456789
      responses:
        '200':
          description: Door unlocked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Door unlocked
                  result:
                    type: object
                    description: Unlock operation result
              example:
                message: Door unlocked
                result:
                  status: unlocked
                  timestamp: '2025-01-15T10:30:00.000Z'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Door not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organization-products:
    get:
      tags:
        - Organization Products
      summary: Get organization products
      description: |
        Returns a paginated list of products for the authenticated organization.
        Supports filtering by category, brand, external product ID, and search term.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of products to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of products to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: category
          in: query
          description: Filter by product category
          required: false
          schema:
            type: string
            enum:
              - beverage
              - food
              - snacks
              - hardware
              - safety
              - tools
              - personal
              - other
          example: snacks
        - name: brand
          in: query
          description: Filter by product brand
          required: false
          schema:
            type: string
          example: Coca-Cola
        - name: externalProductId
          in: query
          description: Filter by external product ID (exact match)
          required: false
          schema:
            type: string
          example: SKU-001
        - name: search
          in: query
          description: Search across product fields
          required: false
          schema:
            type: string
          example: energy drink
      responses:
        '200':
          description: Organization products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrganizationProduct'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                products:
                  - id: orgprod-123e4567-e89b-12d3-a456-426614174000
                    externalProductId: SKU-001-ORG
                    organizationId: org-123456789
                    name: Pepsi Max - Organization Version
                    description: 12 oz. can - Custom pricing
                    brand: Pepsi
                    category: snacks
                    price: 2.99
                    currency: USD
                    weight:
                      value: 355
                      unit: gram
                    tempControl:
                      min: 2
                      max: 8
                      type: cooled
                      unit: celsius
                    shelfLifeMax: 365
                    dimensions:
                      width: 6.98
                      height: 12.19
                      length: 6.98
                      unit: cm
                    images:
                      - url: https://cdn.example.com/pepsi-max-org.jpg
                        alt: Pepsi Max 12oz can
                        tag: primary
                    tags:
                      - beverage
                      - cola
                      - sugar-free
                    barcode: '012000000577'
                    createdAt: '2024-01-15T10:30:00.000Z'
                pagination:
                  total: 1
                  limit: 50
                  offset: 0
                  hasMore: false
        '500':
          description: Failed to fetch organization products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to fetch organization products
    post:
      tags:
        - Organization Products
      summary: Create organization product
      description: Create a new organization-specific product (clone of a global product with custom pricing/metadata).
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationProductInput'
            example:
              externalProductId: SKU-025-ORG
              organizationId: org-123456789
              name: Mountain Dew - Organization Version
              description: 12 oz. can - Custom pricing
              brand: PepsiCo
              category: snacks
              price: 2.79
              currency: USD
              weight:
                value: 355
                unit: gram
              tempControl:
                min: 2
                max: 8
                type: cooled
                unit: celsius
              shelfLifeMax: 365
              dimensions:
                width: 6.98
                height: 12.19
                length: 6.98
                unit: cm
              images:
                - url: https://cdn.example.com/mountain-dew-org.jpg
                  alt: Mountain Dew 12oz can
                  tag: primary
              tags:
                - beverage
                - citrus
                - caffeinated
              barcode: '012000001628'
      responses:
        '201':
          description: Organization product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Organization product created
                  product:
                    $ref: '#/components/schemas/OrganizationProduct'
        '400':
          description: Invalid organization reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Invalid organization reference
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Organization not found
        '409':
          description: Product ID already exists in this organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Product ID already exists in this organization
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /organization-products/{id}:
    get:
      tags:
        - Organization Products
      summary: Get organization product by ID
      description: Retrieve a specific organization product by its ID.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Organization product ID
          example: orgprod-123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Organization product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProduct'
        '404':
          description: Organization product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Organization product not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Organization Products
      summary: Update organization product
      description: Update an existing organization product.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Organization product ID
          example: orgprod-123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationProductInput'
      responses:
        '200':
          description: Organization product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Organization product updated
                  product:
                    $ref: '#/components/schemas/OrganizationProduct'
        '400':
          description: Product ID mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Product ID mismatch
        '404':
          description: Organization product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Organization product not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Organization Products
      summary: Delete organization product
      description: Delete an organization product. Cannot delete if there are dependencies.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Organization product ID
          example: orgprod-123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Organization product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Organization product deleted
        '400':
          description: Cannot delete product with dependencies
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Cannot delete organization product with dependencies
                  details:
                    type: object
                    description: Details about the dependencies
        '404':
          description: Organization product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Organization product not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /organization-products/category/{category}:
    get:
      tags:
        - Organization Products
      summary: Get organization products by category
      description: Retrieve organization products in a specific category with pagination.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            enum:
              - beverage
              - food
              - snacks
              - hardware
              - safety
              - tools
              - personal
              - other
          description: Product category
          example: snacks
        - name: limit
          in: query
          description: Maximum number of products to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of products to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrganizationProduct'
                  category:
                    type: string
                    description: The category being filtered by
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Failed to fetch products by category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to fetch products by category
  /organization-products/brand/{brand}:
    get:
      tags:
        - Organization Products
      summary: Get organization products by brand
      description: Retrieve organization products from a specific brand with pagination.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: brand
          in: path
          required: true
          schema:
            type: string
          description: Product brand
          example: Coca-Cola
        - name: limit
          in: query
          description: Maximum number of products to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of products to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrganizationProduct'
                  brand:
                    type: string
                    description: The brand being filtered by
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Failed to fetch products by brand
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to fetch products by brand
  /organization-products/organization/{orgId}:
    get:
      tags:
        - Organization Products
      summary: Get products for specific organization
      description: Retrieve products for a specific organization. Users can only view products for their own organization.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
          example: org-123456789
        - name: limit
          in: query
          description: Maximum number of products to return
          required: false
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          description: Number of products to skip for pagination
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrganizationProduct'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Access denied - can only view products for your organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Access denied: can only view products for your organization'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Organization not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /assigned-products:
    get:
      tags:
        - Assigned Products
      summary: Get all assigned products
      description: |
        Returns a paginated list of assigned products with filtering options.
        Supports filtering by slot ID, organization product ID, and machine ID.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of assignments to return (default 50)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 50
        - name: offset
          in: query
          description: Number of assignments to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: slot_id
          in: query
          description: Filter by slot ID
          required: false
          schema:
            type: string
          example: slot-123456789
        - name: organization_product_id
          in: query
          description: Filter by organization product ID
          required: false
          schema:
            type: string
          example: orgprod-123456789
        - name: machine_id
          in: query
          description: Filter by machine ID
          required: false
          schema:
            type: string
          example: machine-123456789
      responses:
        '200':
          description: Assigned products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedProductsResponse'
              example:
                assignedProducts:
                  - organizationProductId: orgprod-123456789
                    organizationId: org-123456789
                    machineId: machine-123456789
                    slotId: slot-123456789
                    qtyAssigned: 10
                    qtyAssignedAt: '2025-01-15T10:30:00.000Z'
                    qtyLowThreshold: 3
                    qtyCurrent: 8
                    price: 2.49
                    currency: USD
                    inventoryReport: {}
                    createdAt: '2025-01-15T10:30:00.000Z'
                    notes: Standard assignment
                    enabled: true
                    expirationDate: '2025-06-15T00:00:00.000Z'
                    product:
                      externalProductId: SKU-001
                      name: Pepsi Max
                      description: 12 oz. can
                      brand: Pepsi
                      category: snacks
                      price: 2.49
                      currency: USD
                      weight: {}
                      tempControl: {}
                      shelfLifeMax: 365
                      dimensions: {}
                      images: {}
                      tags:
                        - beverage
                        - cola
                      barcode: '012000000577'
                pagination:
                  total: 1
                  limit: 50
                  offset: 0
                  hasMore: false
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assigned Products
      summary: Create assigned product
      description: |
        Create a new product assignment to a slot.
        Validates that the organization product exists and slot belongs to the organization.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignedProductInput'
            example:
              slotId: slot-123456789
              organizationProductId: orgprod-123456789
              qtyAssigned: 10
              qtyCurrent: 8
              qtyLowThreshold: 3
              qtyAssignedAt: '2025-01-15T10:30:00.000Z'
              price: 2.49
              currency: USD
              inventoryReport: {}
              notes: Initial assignment
              expirationDate: '2025-06-15T00:00:00.000Z'
              enabled: true
      responses:
        '201':
          description: Assigned product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Assigned product created
                  assignedProduct:
                    $ref: '#/components/schemas/AssignedProduct'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                organizationNotFound:
                  summary: Organization not found
                  value:
                    error: Organization not found
                slotNotFound:
                  summary: Slot not found
                  value:
                    error: Slot not found or does not belong to organization
                machineNotFound:
                  summary: Machine not found
                  value:
                    error: Machine not found or does not belong to organization
                productNotFound:
                  summary: Product not found
                  value:
                    error: Product not found in organization product list
        '409':
          description: Product already assigned to this slot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Product already assigned to this slot
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /assigned-products/organization/{orgId}:
    get:
      tags:
        - Assigned Products
      summary: Get assigned products for organization
      description: |
        Retrieve assigned products for a specific organization.
        Users can only view assignments for their own organization.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
          example: org-123456789
        - name: limit
          in: query
          description: Maximum number of assignments to return (default 50)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 50
        - name: offset
          in: query
          description: Number of assignments to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Assigned products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedProductsResponse'
        '403':
          description: Access denied - can only view assigned products for your organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Access denied: can only view assigned products for your organization'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Organization not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /assigned-products/slot/{slotId}:
    get:
      tags:
        - Assigned Products
      summary: Get assigned product for slot
      description: Get the product assigned to a specific slot.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: slotId
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
      responses:
        '200':
          description: Assigned product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedProduct'
        '404':
          description: No product assigned to this slot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: No product assigned to this slot
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assigned Products
      summary: Assign product to slot
      description: |
        Assign a product to a specific slot.
        Validates that the organization product exists and slot belongs to the organization.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: slotId
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignedProductSlotInput'
            example:
              organizationProductId: orgprod-123456789
              qtyAssigned: 10
              qtyCurrent: 8
              qtyLowThreshold: 3
              qtyAssignedAt: '2025-01-15T10:30:00.000Z'
              price: 2.49
              currency: USD
              inventoryReport: {}
              notes: Slot-specific assignment
              expirationDate: '2025-06-15T00:00:00.000Z'
              enabled: true
      responses:
        '201':
          description: Product assigned to slot successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product assigned to slot
                  assignedProduct:
                    $ref: '#/components/schemas/AssignedProduct'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                organizationNotFound:
                  summary: Organization not found
                  value:
                    error: Organization not found
                productNotFound:
                  summary: Product not found
                  value:
                    error: Product not found in organization product list
                slotNotFound:
                  summary: Slot not found
                  value:
                    error: Slot not found or does not belong to organization
                machineNotFound:
                  summary: Machine not found
                  value:
                    error: Machine not found or does not belong to organization
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Assigned Products
      summary: Update assigned product
      description: Update a product assignment for a specific slot.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: slotId
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignedProductSlotInput'
      responses:
        '200':
          description: Assigned product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Assigned product updated
                  assignedProduct:
                    $ref: '#/components/schemas/AssignedProduct'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: No product assigned to slot
                  value:
                    error: No product assigned to this slot
                slotNotFound:
                  summary: Slot not found
                  value:
                    error: Slot not found or does not belong to organization
                machineNotFound:
                  summary: Machine not found
                  value:
                    error: Machine not found or does not belong to organization
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Assigned Products
      summary: Partially update assigned product
      description: |
        Partially update a product assignment for a specific slot.
        Allows updating inventory quantities, pricing, and timestamps.
        qtyCurrent and qtyAssignedAt must be provided together if either is updated.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: slotId
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignedProductPatch'
            examples:
              updateQuantity:
                summary: Update current quantity and timestamp
                value:
                  qtyCurrent: 5
                  qtyAssignedAt: '2025-01-15T14:30:00.000Z'
              updatePricing:
                summary: Update pricing
                value:
                  price: 2.99
                  currency: USD
              updateThreshold:
                summary: Update low threshold
                value:
                  qtyLowThreshold: 2
      responses:
        '200':
          description: Assigned product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Assigned product updated successfully
                  assignedProduct:
                    $ref: '#/components/schemas/AssignedProduct'
                  fields:
                    type: object
                    description: Fields that were updated
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: No product assigned to slot
                  value:
                    error: No product assigned to this slot
                slotNotFound:
                  summary: Slot not found
                  value:
                    error: Slot not found or does not belong to organization
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Assigned Products
      summary: Remove product assignment from slot
      description: Remove a product assignment from a specific slot.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: slotId
          in: path
          required: true
          schema:
            type: string
          description: Slot ID
          example: slot-123456789
      responses:
        '200':
          description: Product assignment removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product assignment removed
        '404':
          description: No product assigned to this slot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: No product assigned to this slot
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /published-catalogs/{machineId}:
    get:
      tags:
        - Published Catalogs
      summary: Get published catalog for machine
      description: |
        Retrieve the published catalog for a specific vending machine.
        Access control is enforced based on organization ownership.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: machineId
          in: path
          required: true
          schema:
            type: string
          description: Machine unique identifier
          example: 0a240011-d248-4733-bb38-5cf93a1fb12b
      responses:
        '200':
          description: Published catalog retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishedCatalog'
              example:
                machineId: 0a240011-d248-4733-bb38-5cf93a1fb12b
                organizationId: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
                unpublishedData: true
                hash: 2b808d6e521c493b48541f515d891723414fd87131b790c67a27223e6a2ca429
                type: machine
                data:
                  data:
                    config:
                      data:
                        store:
                          name: Intensive Care Unit
                          storeId: baf31c97-1804-47c4-b93c-9e654dbdcf92
                          organizationId: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
                          description: West Wing lower level
                          hours: {}
                          address:
                            street1: 2745 Sunset Blvd
                            street2: null
                            city: Woodland Hills
                            state: CA
                            country: USA
                            postalCode: '91367'
                          contact:
                            email: maintenance@athenos-medical.co
                            phone: '+12135575555'
                        machine:
                          name: NIC-U
                          machineId: 0a240011-d248-4733-bb38-5cf93a1fb12b
                          organizationId: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
                          storeId: baf31c97-1804-47c4-b93c-9e654dbdcf92
                          model: VLX1800-A
                          serialNumber: ZX434FD33
                          slots: []
                          images: []
                          location:
                            floor: 2
                            indoor: true
                            description: null
                          metadata:
                            tcpModbusIp: 10.1.1.45
                            brandLogoUrl: https://vendistax-branding.s3.us-west-2.amazonaws.com/athenos/athenos.png
                            useTcpModbus: true
                            purchaseCodeLength: 4
                        organization:
                          name: Athenos Medical
                          organizationId: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
                          description: S.B. Campusa
                          address:
                            street1: 8999 West Anapamu Ave.
                            street2: Suite E
                            city: Santa Barbara
                            state: CA
                            country: USA
                            postalCode: '93102'
                          contact:
                            email: barryhiggins@athenos-medical.com
                            phone: '+18055158900'
                      hash: b2dbdae6b35dc4cdb87776426f819307599d1401aba381a96d4f3b6b8647580c
                    catalog:
                      data:
                        assignedProducts: []
                      hash: 69ad537888633a9fe581d9bba21219ba514eb984c7a540c607c5455b1b8d192d
                  hash: 2b808d6e521c493b48541f515d891723414fd87131b790c67a27223e6a2ca429
                updatedAt: '2025-10-13T20:16:45.199Z'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Catalog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Catalog not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /published-catalogs:
    post:
      tags:
        - Published Catalogs
      summary: Publish catalog for machine
      description: |
        Create or update a published catalog for a vending machine.
        Only publishes if there is unpublished data available.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishCatalogRequest'
            example:
              machineId: 0a240011-d248-4733-bb38-5cf93a1fb12b
              organizationId: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
      responses:
        '201':
          description: Catalog published successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Catalog published successfully
                  result:
                    $ref: '#/components/schemas/PublishedCatalog'
        '400':
          description: No unpublished data to publish
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: There is no unpublished data to publish
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                organizationNotFound:
                  summary: Organization not found
                  value:
                    error: Organization not found
                machineNotFound:
                  summary: Machine not found
                  value:
                    error: Machine not found
                machineConfigNotFound:
                  summary: Machine config not found
                  value:
                    error: Machine not found, there's no config to publish
        '500':
          $ref: '#/components/responses/InternalServerError'
  /notification-clients:
    get:
      tags:
        - Notification Clients
      summary: List notification clients
      description: |
        Get a paginated list of notification clients for the authenticated organization.
        Supports filtering by enabled status, preferred channel, and consent status.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of clients to return (max 100, default 50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 10
        - name: offset
          in: query
          description: Number of clients to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
        - name: enabled
          in: query
          description: Filter by enabled status
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
          example: 'true'
        - name: preferred_channel
          in: query
          description: Filter by preferred notification channel
          required: false
          schema:
            type: string
            enum:
              - email
              - sms
              - push
          example: email
        - name: consent_status
          in: query
          description: Filter by consent status
          required: false
          schema:
            type: string
            enum:
              - consented
              - no_consent
          example: consented
        - name: search
          in: query
          description: Search clients by name or email
          required: false
          schema:
            type: string
            maxLength: 255
          example: john.doe
      responses:
        '200':
          description: Notification clients retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  notificationClients:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationClient'
                    description: List of notification clients
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                notificationClients:
                  - id: nc-123456789
                    organizationId: org-123456789
                    name: John Doe
                    email: john.doe@example.com
                    phone: '+12345678900'
                    webhookUrl: null
                    secret: null
                    preferredChannel: email
                    enabled: true
                    consent:
                      email: true
                      sms: false
                      push: false
                      timestamp: '2025-01-15T10:30:00.000Z'
                      method: web_form
                    optOut:
                      timestamp: null
                      reason: null
                    createdAt: '2025-01-15T10:30:00.000Z'
                    updatedAt: '2025-01-15T10:30:00.000Z'
                pagination:
                  total: 1
                  limit: 50
                  offset: 0
                  hasMore: false
        '500':
          description: Failed to retrieve notification clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to retrieve notification clients
    post:
      tags:
        - Notification Clients
      summary: Create notification client
      description: |
        Create a new notification client. At least one contact method (email, phone, or webhookUrl) is required.
        If preferredChannel is specified, the corresponding contact information must be provided.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationClientInput'
            examples:
              emailClient:
                summary: Email notification client
                value:
                  name: John Doe
                  email: john.doe@example.com
                  preferredChannel: email
                  enabled: true
                  consent:
                    email: true
                    method: web_form
              smsClient:
                summary: SMS notification client
                value:
                  name: Jane Smith
                  phone: '+12345678901'
                  preferredChannel: sms
                  enabled: true
                  consent:
                    sms: true
                    method: sms_opt_in
              webhookClient:
                summary: Webhook notification client
                value:
                  name: Alert System
                  webhookUrl: https://api.example.com/webhooks/alerts
                  secret: webhook-secret-123
                  preferredChannel: webhook
                  enabled: true
                  consent:
                    push: true
                    method: api
              multiChannelClient:
                summary: Multi-channel notification client
                value:
                  name: Admin User
                  email: admin@example.com
                  phone: '+12345678902'
                  webhookUrl: https://slack.com/api/webhook/abc123
                  preferredChannel: slack
                  enabled: true
                  consent:
                    email: true
                    sms: true
                    push: true
                    method: admin_added
      responses:
        '201':
          description: Notification client created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification client created
                  client:
                    $ref: '#/components/schemas/NotificationClient'
        '400':
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateName:
                  summary: Duplicate name
                  value:
                    error: DUPLICATE_NAME
                missingContact:
                  summary: Missing contact method
                  value:
                    error: Either email, phone, or webhook URL is required
                invalidChannel:
                  summary: Invalid preferred channel
                  value:
                    error: Contact information must match preferred channel
                invalidConsent:
                  summary: Invalid consent
                  value:
                    error: Cannot give consent for channels without contact information
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: ORGANIZATION_NOT_FOUND
        '500':
          description: Failed to create notification client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to create notification client
  /notification-clients/{id}:
    get:
      tags:
        - Notification Clients
      summary: Get notification client
      description: Get a specific notification client by ID.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification client ID
          example: nc-123456789
      responses:
        '200':
          description: Notification client retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationClient'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
    put:
      tags:
        - Notification Clients
      summary: Update notification client
      description: |
        Update an existing notification client. All fields are optional for updates.
        Same validation rules apply as for creation.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification client ID
          example: nc-123456789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationClientUpdateInput'
            examples:
              updateEmail:
                summary: Update email address
                value:
                  email: newemail@example.com
              updatePreferences:
                summary: Update preferences and consent
                value:
                  preferredChannel: sms
                  consent:
                    email: false
                    sms: true
                    method: admin_added
              disableClient:
                summary: Disable client
                value:
                  enabled: false
      responses:
        '200':
          description: Notification client updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification client updated
                  client:
                    $ref: '#/components/schemas/NotificationClient'
        '400':
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                noFields:
                  summary: No fields provided
                  value:
                    error: At least one field must be provided for update
                duplicateName:
                  summary: Duplicate name
                  value:
                    error: DUPLICATE_NAME
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
    delete:
      tags:
        - Notification Clients
      summary: Delete notification client
      description: Permanently delete a notification client.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification client ID
          example: nc-123456789
      responses:
        '200':
          description: Notification client deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification client deleted
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
  /notification-clients/{id}/opt-out:
    post:
      tags:
        - Notification Clients
      summary: Opt out notification client
      description: |
        Opt out a notification client from all notifications.
        This disables the client and removes all consent.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification client ID
          example: nc-123456789
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptOutInput'
            example:
              reason: User no longer wants to receive notifications
      responses:
        '200':
          description: Client opted out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Client opted out
                  client:
                    $ref: '#/components/schemas/NotificationClient'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
  /notification-clients/{id}/opt-in:
    post:
      tags:
        - Notification Clients
      summary: Opt in notification client
      description: |
        Opt in a notification client to receive notifications again.
        This enables the client and updates consent timestamp.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification client ID
          example: nc-123456789
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptInInput'
            example:
              consent_method: admin_added
      responses:
        '200':
          description: Client opted in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Client opted in
                  client:
                    $ref: '#/components/schemas/NotificationClient'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
  /notification-subscriptions:
    get:
      tags:
        - Notification Subscriptions
      summary: List notification subscriptions
      description: |
        Get a paginated list of notification subscriptions for the authenticated organization.
        Supports filtering by enabled status, store, machine, client, tags, and frequency.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of subscriptions to return (max 100, default 50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 10
        - name: offset
          in: query
          description: Number of subscriptions to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
        - name: enabled
          in: query
          description: Filter by enabled status
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
          example: 'true'
        - name: storeId
          in: query
          description: Filter by store ID
          required: false
          schema:
            type: string
          example: baf31c97-1804-47c4-b93c-9e654dbdcf92
        - name: machineId
          in: query
          description: Filter by machine ID
          required: false
          schema:
            type: string
          example: 0a240011-d248-4733-bb38-5cf93a1fb12b
        - name: notificationClientId
          in: query
          description: Filter by notification client ID
          required: false
          schema:
            type: string
          example: nc-123456789
        - name: tags
          in: query
          description: Filter by notification tags (comma-separated)
          required: false
          schema:
            type: string
          example: inventory_low,machine_error
        - name: frequency
          in: query
          description: Filter by notification frequency
          required: false
          schema:
            type: string
          example: immediate
      responses:
        '200':
          description: Notification subscriptions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  notificationSubscriptions:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationSubscription'
                    description: List of notification subscriptions
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                notificationSubscriptions:
                  - id: sub-123456789
                    organizationId: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
                    storeId: baf31c97-1804-47c4-b93c-9e654dbdcf92
                    storeName: Intensive Care Unit
                    machineId: 0a240011-d248-4733-bb38-5cf93a1fb12b
                    machineName: NIC-U
                    notificationClientId: nc-123456789
                    clientName: John Doe
                    clientEmail: john.doe@example.com
                    tags:
                      - inventory_low
                      - machine_error
                    frequency: immediate
                    lastNotificationAt: '2025-01-15T14:30:00.000Z'
                    enabled: true
                    metadata: {}
                    createdAt: '2025-01-15T10:30:00.000Z'
                    updatedAt: '2025-01-15T10:30:00.000Z'
                pagination:
                  total: 1
                  limit: 50
                  offset: 0
                  hasMore: false
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid query parameters
                  details:
                    type: array
                    items:
                      type: object
                    description: Validation error details
        '500':
          description: Failed to retrieve notification subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to retrieve notification subscriptions
    post:
      tags:
        - Notification Subscriptions
      summary: Create notification subscription
      description: |
        Create a new notification subscription linking a client to a store/machine for specific notification types.
        Validates that the client, store, and machine exist and belong to the organization.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSubscriptionInput'
            examples:
              storeSubscription:
                summary: Store-level subscription
                description: Subscribe to all notifications for a store
                value:
                  storeId: baf31c97-1804-47c4-b93c-9e654dbdcf92
                  notificationClientId: nc-123456789
                  tags:
                    - inventory_low
                    - machine_error
                  frequency: immediate
                  enabled: true
                  metadata: {}
              machineSubscription:
                summary: Machine-specific subscription
                description: Subscribe to notifications for a specific machine
                value:
                  storeId: baf31c97-1804-47c4-b93c-9e654dbdcf92
                  machineId: 0a240011-d248-4733-bb38-5cf93a1fb12b
                  notificationClientId: nc-123456789
                  tags:
                    - inventory_low
                  frequency: daily
                  enabled: true
                  metadata:
                    priority: high
              batchSubscription:
                summary: Batch notification subscription
                description: Subscribe to daily batch notifications
                value:
                  storeId: baf31c97-1804-47c4-b93c-9e654dbdcf92
                  notificationClientId: nc-987654321
                  tags:
                    - daily_report
                    - inventory_summary
                  frequency: daily
                  enabled: true
      responses:
        '201':
          description: Notification subscription created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification subscription created
                  subscription:
                    $ref: '#/components/schemas/NotificationSubscription'
        '400':
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateSubscription:
                  summary: Duplicate subscription
                  value:
                    error: Subscription already exists for this client, store, and tag
                clientNotFound:
                  summary: Client not found
                  value:
                    error: Notification client not found
                storeNotFound:
                  summary: Store not found
                  value:
                    error: Store not found
                machineNotFound:
                  summary: Machine not found
                  value:
                    error: Machine not found
        '500':
          description: Failed to create notification subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Internal server error
  /notification-subscriptions/{id}:
    get:
      tags:
        - Notification Subscriptions
      summary: Get notification subscription
      description: Get a specific notification subscription by ID.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification subscription ID
          example: sub-123456789
      responses:
        '200':
          description: Notification subscription retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
    put:
      tags:
        - Notification Subscriptions
      summary: Update notification subscription
      description: |
        Update an existing notification subscription. All fields from the creation schema are available for updates.
        Same validation rules apply as for creation.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification subscription ID
          example: sub-123456789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSubscriptionInput'
            examples:
              updateFrequency:
                summary: Update frequency
                value:
                  storeId: baf31c97-1804-47c4-b93c-9e654dbdcf92
                  notificationClientId: nc-123456789
                  tags:
                    - inventory_low
                  frequency: daily
                  enabled: true
              updateTags:
                summary: Update tags
                value:
                  storeId: baf31c97-1804-47c4-b93c-9e654dbdcf92
                  notificationClientId: nc-123456789
                  tags:
                    - inventory_low
                    - machine_error
                    - maintenance_due
                  frequency: immediate
                  enabled: true
              disableSubscription:
                summary: Disable subscription
                value:
                  storeId: baf31c97-1804-47c4-b93c-9e654dbdcf92
                  notificationClientId: nc-123456789
                  tags:
                    - inventory_low
                  frequency: immediate
                  enabled: false
      responses:
        '200':
          description: Notification subscription updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification subscription updated
                  subscription:
                    $ref: '#/components/schemas/NotificationSubscription'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
    delete:
      tags:
        - Notification Subscriptions
      summary: Delete notification subscription
      description: Permanently delete a notification subscription.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification subscription ID
          example: sub-123456789
      responses:
        '200':
          description: Notification subscription deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification subscription deleted
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
  /notification-subscriptions/{id}/enable:
    post:
      tags:
        - Notification Subscriptions
      summary: Enable notification subscription
      description: Enable a notification subscription to start receiving notifications.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification subscription ID
          example: sub-123456789
      responses:
        '200':
          description: Subscription enabled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Subscription enabled
                  subscription:
                    $ref: '#/components/schemas/NotificationSubscription'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
  /notification-subscriptions/{id}/disable:
    post:
      tags:
        - Notification Subscriptions
      summary: Disable notification subscription
      description: Disable a notification subscription to stop receiving notifications.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification subscription ID
          example: sub-123456789
      responses:
        '200':
          description: Subscription disabled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Subscription disabled
                  subscription:
                    $ref: '#/components/schemas/NotificationSubscription'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Access denied
        '404':
          description: Notification subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
  /sales:
    get:
      tags:
        - Sales
      summary: Get all sales receipts
      description: |
        Returns a paginated list of receipts for the authenticated organization.
        Supports filtering by machine ID, store ID, and date range.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of receipts to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of receipts to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: machine_id
          in: query
          description: Filter receipts by machine ID
          required: false
          schema:
            type: string
          example: machine-123456789
        - name: store_id
          in: query
          description: Filter receipts by store ID
          required: false
          schema:
            type: string
          example: store-123456789
        - name: from
          in: query
          description: Filter receipts from this date (ISO string)
          required: false
          schema:
            type: string
            format: date-time
          example: '2025-01-01T00:00:00.000Z'
        - name: to
          in: query
          description: Filter receipts up to this date (ISO string)
          required: false
          schema:
            type: string
            format: date-time
          example: '2025-01-31T23:59:59.999Z'
      responses:
        '200':
          description: Receipts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  receipts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Receipt'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied - no organization assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Access denied: no organization assigned'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Sales
      summary: Create a new sales receipt
      description: |
        Create a new sales receipt. The system validates that:
        - The machine belongs to the organization
        - All slots belong to the machine and organization
        - The store exists for the machine
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptInput'
      responses:
        '201':
          description: Receipt created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Receipt created successfully
                  receipt:
                    $ref: '#/components/schemas/Receipt'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Store not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /sales/{id}:
    get:
      tags:
        - Sales
      summary: Get sales receipt by ID
      description: Get a specific receipt by ID. Users can only access receipts from their organization.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Receipt ID
          example: receipt-123456789
      responses:
        '200':
          description: Receipt retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Receipt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: NOT_FOUND
        '500':
          $ref: '#/components/responses/InternalServerError'
  /iot/config/{id}:
    get:
      tags:
        - IoT
      summary: Get machine configuration
      description: |
        Retrieve the configuration for a specific vending machine.
        Supports conditional requests using ETags for bandwidth optimization.
        Only machines can access their own configuration.
      security:
        - ApiDeviceKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Machine ID
          example: machine-123456789
        - name: force
          in: query
          description: Force refresh, ignore client cache
          required: false
          schema:
            type: boolean
            default: false
          example: false
        - name: hash
          in: query
          description: Client's current configuration hash for comparison
          required: false
          schema:
            type: string
          example: abc123def456
        - name: If-None-Match
          in: header
          description: ETag header for conditional requests (alternative to hash param)
          required: false
          schema:
            type: string
          example: '"abc123def456"'
      responses:
        '200':
          description: Configuration retrieved successfully
          headers:
            ETag:
              description: Configuration hash for caching
              schema:
                type: string
              example: '"def789ghi012"'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineConfiguration'
        '304':
          description: Not Modified - Configuration unchanged
          headers:
            ETag:
              description: Current configuration hash
              schema:
                type: string
              example: '"abc123def456"'
        '403':
          description: Access denied - machine can only access its own configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Access denied: machine can only access its own configuration'
        '404':
          description: Configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: No configs found, check if the machine is configured
        '500':
          description: Failed to fetch machine configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to fetch machine configuration
  /iot/sales:
    post:
      tags:
        - IoT
      summary: Create sales receipt
      description: |
        Create a sales receipt from a vending machine transaction.
        Validates that all slots belong to the machine and organization.
        Automatically determines store ID from machine configuration.
      security:
        - ApiDeviceKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IoTSaleInput'
            example:
              organizationId: org-123456789
              machineId: machine-123456789
              total: 5.47
              tax: 0.47
              currency: USD
              recordedAt: '2025-01-15T14:30:00.000Z'
              payment:
                method: credit_card
                cardType: visa
                last4: '1234'
              metadata:
                transactionId: txn_abc123
              items:
                - organizationProductId: org-prod-123
                  slotId: slot-123456789
                  externalProductId: prod-pepsi-355ml
                  unitPrice: 2.49
                  qty: 2
      responses:
        '201':
          description: Receipt created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Receipt created successfully
                  receipt:
                    $ref: '#/components/schemas/Receipt'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Invalid input data
        '403':
          description: Access denied or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                accessDenied:
                  summary: Access denied
                  value:
                    error: 'Access denied: no organization assigned'
                slotNotOwned:
                  summary: Slot not owned by organization
                  value:
                    error: Slot not owned by the organization
                slotWrongMachine:
                  summary: Slot doesn't belong to machine
                  value:
                    error: Slot does not belong to this machine
        '404':
          description: Store not found for machine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Store not found for this machine
        '500':
          description: Failed to create receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to create receipt
  /iot/telemetry:
    post:
      tags:
        - IoT
      summary: Create telemetry event
      description: |
        Create a telemetry event from a vending machine.
        Machine can only create events for itself.
        Automatically determines store ID and organization ID from machine credentials.
      security:
        - ApiDeviceKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryEventInput'
            example:
              organizationId: org-123456789
              machineId: machine-123456789
              eventType: door_opened
              recordedAt: '2025-01-15T14:30:00.000Z'
              metadata:
                duration: 15
                location: front_door
                temperature: 4.2
      responses:
        '201':
          description: Telemetry event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Telemetry event created successfully
                  event:
                    $ref: '#/components/schemas/TelemetryEvent'
        '400':
          description: Invalid telemetry data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Invalid telemetry data
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Access denied: no organization assigned'
        '404':
          description: Machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Machine not found
        '500':
          description: Failed to create telemetry event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to create telemetry event
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication
    ApiDeviceKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Device API key for machine authentication
  schemas:
    User:
      type: object
      description: User object as returned by the API (based on mapUserRowToJson)
      properties:
        userId:
          type: string
          description: Unique user identifier (mapped from row.id)
          example: usr_1234567890abcdef
        organizationId:
          type: string
          description: Organization identifier that the user belongs to (mapped from row.organization_id)
          example: org-123456789
        email:
          type: string
          format: email
          description: User email address
          example: user@example.com
        role:
          type: string
          description: User role within the organization (mapped from row.role)
          example: user
        isActive:
          type: boolean
          description: Whether the user account is active (mapped from row.is_active)
          example: true
        createdAt:
          type: string
          format: date-time
          description: When the user account was created (mapped from row.created_at)
          example: '2025-01-15T10:30:00.000Z'
    UserRegistrationInput:
      type: object
      description: Input schema for user registration (based on userRegistrationSchema)
      required:
        - email
        - password
        - organizationId
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: user@example.com
        password:
          type: string
          description: User password
          minLength: 8
          maxLength: 128
          example: SecurePassword123!
        organizationId:
          type: string
          description: Organization identifier to assign the user to
          minLength: 1
          maxLength: 255
          example: org-123456789
    UserLoginInput:
      type: object
      description: Input schema for user login with credentials (based on userCredLoginSchema)
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: user@example.com
        password:
          type: string
          description: User password
          minLength: 8
          maxLength: 128
          example: SecurePassword123!
    ApiKeyLoginInput:
      type: object
      description: Input schema for API key login (based on userLoginSchema)
      required:
        - apiKey
      properties:
        apiKey:
          type: string
          description: Valid API key for authentication
          minLength: 1
          maxLength: 128
          example: ak_1234567890abcdef
    ApiKey:
      type: object
      description: API key object as returned by mapApiKeyRowToJson
      properties:
        keyId:
          type: string
          description: Unique API key identifier
          example: key-123456789
        description:
          type: string
          description: Human-readable description of the API key
          example: Production API Key
        organizationId:
          type: string
          nullable: true
          description: Organization this key belongs to
          example: org-123456789
        machineId:
          type: string
          nullable: true
          description: Machine this key is tied to (for machine keys)
          example: machine-123456789
        isRoot:
          type: boolean
          description: Whether this is a root key with admin privileges
          example: true
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
          example: '2025-01-15T10:30:00.000Z'
        lastUsedAt:
          type: string
          format: date-time
          nullable: true
          description: When the API key was last used
          example: '2025-01-15T14:30:00.000Z'
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: When the API key expires (null for no expiration)
          example: null
        revokedAt:
          type: string
          format: date-time
          nullable: true
          description: When the API key was revoked (null if active)
          example: null
      required:
        - keyId
        - description
        - isRoot
        - createdAt
    ApiKeyInput:
      type: object
      description: Input schema for creating API keys (based on apiKeySchema)
      required:
        - description
      properties:
        description:
          type: string
          minLength: 1
          description: Human-readable description of the API key (required, non-empty)
          example: Production API Key
        organizationId:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          description: Organization ID (optional - will use authenticated org if not provided)
          example: org-123456789
        machineId:
          type: string
          nullable: true
          description: Machine ID for machine-specific keys (optional)
          example: machine-123456789
        isRoot:
          type: boolean
          default: false
          description: Whether this should be a root key (cannot be true if machineId is set)
          example: true
      additionalProperties: false
    CreateOtpInput:
      type: object
      description: Input schema for creating OTP codes (based on createOtpSchema)
      properties:
        expiresInMinutes:
          type: integer
          minimum: 1
          maximum: 1440
          default: 60
          description: How many minutes until OTP expires
          example: 30
        description:
          type: string
          maxLength: 255
          description: Optional description for the OTP
          example: Dashboard access token
      additionalProperties: false
    RedeemOtpInput:
      type: object
      description: Input schema for redeeming OTP codes (based on redeemOtpSchema)
      required:
        - otpCode
      properties:
        otpCode:
          type: string
          minLength: 1
          description: OTP code to redeem
          example: ABC123DEF
      additionalProperties: false
    DashboardTokenInput:
      type: object
      description: Input schema for dashboard token requests (based on supersetTokenSchema)
      properties:
        organizationId:
          type: string
          minLength: 1
          maxLength: 50
          description: Organization ID (optional - will use authenticated org if not provided)
          example: org-123456789
      additionalProperties: false
    OtpInfo:
      type: object
      description: OTP information response
      properties:
        otpCode:
          type: string
          example: ABC123DEF
        description:
          type: string
          nullable: true
          example: Dashboard access token
        createdAt:
          type: string
          format: date-time
          example: '2025-01-15T14:30:00.000Z'
        expiresAt:
          type: string
          format: date-time
          example: '2025-01-15T15:30:00.000Z'
        redeemedAt:
          type: string
          format: date-time
          nullable: true
          example: null
      required:
        - otpCode
        - createdAt
        - expiresAt
    Pagination:
      type: object
      description: Pagination information
      properties:
        limit:
          type: integer
          description: Number of items requested
          example: 50
        offset:
          type: integer
          description: Number of items skipped
          example: 0
        total:
          type: integer
          description: Total number of items available
          example: 150
        hasMore:
          type: boolean
          description: Whether there are more items available
          example: true
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Access denied
    Organization:
      type: object
      description: Organization object as returned by the API
      properties:
        organizationId:
          type: string
          description: Unique organization identifier (UUID)
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Organization name
          maxLength: 255
          example: Acme Corporation
        description:
          type: string
          description: Organization description
          maxLength: 500
          example: Leading provider of vending solutions
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact'
        dashboardId:
          type: string
          description: Optional dashboard identifier
          nullable: true
          example: dashboard-123
    OrganizationInput:
      type: object
      description: Input schema for creating or updating organizations
      required:
        - name
        - description
        - address
        - contact
      properties:
        name:
          type: string
          description: Organization name
          minLength: 1
          maxLength: 255
          example: Acme Corporation
        description:
          type: string
          description: Organization description
          minLength: 1
          maxLength: 500
          example: Leading provider of vending solutions
        address:
          $ref: '#/components/schemas/AddressInput'
        contact:
          $ref: '#/components/schemas/ContactInput'
        dashboardId:
          type: string
          description: Optional dashboard identifier
          nullable: true
          example: dashboard-123
    Address:
      type: object
      properties:
        street1:
          type: string
          example: 2745 Sunset Blvd
        street2:
          type: string
          nullable: true
          example: null
        city:
          type: string
          example: Woodland Hills
        state:
          type: string
          example: CA
        country:
          type: string
          example: USA
        postalCode:
          type: string
          example: '91367'
      required:
        - street1
        - city
        - state
        - country
        - postalCode
    AddressInput:
      type: object
      description: Address input for creating/updating stores
      required:
        - street1
        - city
        - state
        - postalCode
        - country
      properties:
        street1:
          type: string
          description: Primary street address
          minLength: 1
          example: 123 Main Street
        street2:
          type: string
          description: Secondary street address
          nullable: true
          example: Suite 100
        city:
          type: string
          description: City name
          minLength: 1
          example: Anytown
        state:
          type: string
          description: State or province
          minLength: 1
          example: CA
        postalCode:
          type: string
          description: Postal or ZIP code
          minLength: 1
          example: '12345'
        country:
          type: string
          description: Country name
          minLength: 1
          example: USA
    Contact:
      type: object
      properties:
        email:
          type: string
          format: email
          example: maintenance@athenos-medical.co
        phone:
          type: string
          example: '+12135575555'
      required:
        - email
        - phone
    ContactInput:
      type: object
      description: Contact input for creating/updating stores
      properties:
        phone:
          type: string
          description: Phone number
          nullable: true
          example: +1-555-123-4567
        email:
          type: string
          description: Email address
          format: email
          nullable: true
          example: store@example.com
    Store:
      type: object
      description: Store object as returned by the API
      properties:
        storeId:
          type: string
          description: Unique store identifier
          example: store-123456789
        organizationId:
          type: string
          description: Organization identifier that owns this store
          example: org-123456789
        name:
          type: string
          description: Store name
          maxLength: 255
          example: Downtown Location
        description:
          type: string
          description: Store description
          maxLength: 500
          example: Main downtown store location with high foot traffic
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact'
        hours:
          type: object
          description: Store hours (placeholder for future implementation)
          example: {}
    Machine:
      type: object
      description: Machine object with status as returned by GET /machines (based on machineService.listMachines)
      allOf:
        - $ref: '#/components/schemas/MachineWithoutStatus'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/MachineStatus'
    NotificationClient:
      type: object
      description: Notification client object as returned by mapNotificationClientRowToJson
      properties:
        id:
          type: string
          description: Unique notification client identifier
          example: nc-123456789
        organizationId:
          type: string
          description: Organization this client belongs to
          example: org-123456789
        name:
          type: string
          description: Human-readable name for the client
          example: John Doe
        email:
          type: string
          format: email
          nullable: true
          description: Email address for email notifications
          example: john.doe@example.com
        phone:
          type: string
          nullable: true
          description: Phone number for SMS notifications
          example: '+12345678900'
        webhookUrl:
          type: string
          format: uri
          nullable: true
          description: Webhook URL for webhook/push notifications
          example: https://api.example.com/webhooks/alerts
        secret:
          type: string
          nullable: true
          description: Secret for webhook authentication
          example: webhook-secret-123
        preferredChannel:
          type: string
          enum:
            - email
            - sms
            - webhook
            - slack
            - teams
          nullable: true
          description: Preferred notification channel
          example: email
        enabled:
          type: boolean
          description: Whether the client is enabled to receive notifications
          example: true
        consent:
          $ref: '#/components/schemas/ConsentInfo'
        optOut:
          $ref: '#/components/schemas/OptOutInfo'
        createdAt:
          type: string
          format: date-time
          description: When the client was created
          example: '2025-01-15T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: When the client was last updated
          example: '2025-01-15T10:30:00.000Z'
      required:
        - id
        - organizationId
        - name
        - enabled
        - consent
        - optOut
        - createdAt
        - updatedAt
    StoreInput:
      type: object
      description: Input schema for creating or updating stores
      required:
        - name
        - description
        - address
        - contact
      properties:
        organizationId:
          type: string
          description: Organization identifier (optional - will use user's organization if not provided)
          minLength: 1
          example: org-123456789
        name:
          type: string
          description: Store name
          minLength: 1
          maxLength: 255
          example: Downtown Location
        description:
          type: string
          description: Store description
          maxLength: 500
          example: Main downtown store location with high foot traffic
        address:
          $ref: '#/components/schemas/AddressInput'
        contact:
          $ref: '#/components/schemas/ContactInput'
    MachineWithoutStatus:
      type: object
      description: Machine object without status as returned by individual operations (based on mapMachineRowToJson)
      properties:
        machineId:
          type: string
          description: Unique machine identifier (mapped from row.id)
          example: machine-123456789
        organizationId:
          type: string
          description: Organization identifier that owns this machine
          example: org-123456789
        storeId:
          type: string
          description: Store identifier where machine is located
          example: store-123456789
        name:
          type: string
          description: Machine name
          example: VM-001 Main Entrance
        model:
          type: string
          description: Machine model
          example: VendMax Pro 2000
        serialNumber:
          type: string
          description: Machine serial number
          example: VM2000-2024-001
        location:
          type: object
          description: Machine location details
          properties:
            description:
              type: string
              nullable: true
              description: Human-readable location description
              example: Near main entrance
            floor:
              type: integer
              nullable: true
              description: Floor number
              example: 1
            indoor:
              type: boolean
              nullable: true
              description: Whether machine is indoors
              example: true
        metadata:
          type: object
          description: Additional machine metadata
          example:
            installationDate: '2024-01-15'
            warranty: 2 years
        lastHeartbeatAt:
          type: string
          format: date-time
          description: Last heartbeat timestamp (conditionally included)
          example: '2025-01-15T10:30:00.000Z'
        images:
          type: array
          items:
            type: string
          description: Array of image URLs
          example: []
    MachineStatus:
      type: object
      description: Machine status as returned by machineStatusService.getMachineStatus()
      properties:
        status:
          type: string
          description: Current machine status (from statusData or 'unknown' from DB)
          example: online
        lastUpdate:
          type: string
          format: date-time
          description: Last status update timestamp (ISO string)
          example: '2025-01-15T10:30:00.000Z'
        lastUpdateTs:
          type: integer
          description: Last status update timestamp (Unix timestamp in milliseconds)
          example: 1737024600000
        isOnline:
          type: boolean
          description: Whether machine is considered online (not stale)
          example: true
        isStale:
          type: boolean
          description: Whether status is stale (older than STALE_THRESHOLD_MS = 10 minutes)
          example: false
      additionalProperties: true
      example:
        status: online
        lastUpdate: '2025-01-15T10:30:00.000Z'
        lastUpdateTs: 1737024600000
        isOnline: true
        isStale: false
    MachineInput:
      type: object
      description: Input schema for creating or updating machines (based on machineSchema)
      required:
        - storeId
        - name
        - model
        - serialNumber
      properties:
        organizationId:
          type: string
          description: Organization identifier (optional - will use user's organization if not provided)
          minLength: 1
          maxLength: 255
          example: org-123456789
        storeId:
          type: string
          description: Store identifier where machine will be located
          minLength: 1
          maxLength: 255
          example: store-123456789
        name:
          type: string
          description: Machine name
          minLength: 1
          maxLength: 255
          example: VM-002 Cafeteria
        model:
          type: string
          description: Machine model
          minLength: 1
          maxLength: 255
          example: VendMax Pro 2000
        serialNumber:
          type: string
          description: Machine serial number
          minLength: 1
          maxLength: 128
          example: VM2000-2024-002
        location:
          type: object
          description: Machine location details (at least one field required if provided)
          properties:
            description:
              type: string
              nullable: true
              description: Human-readable location description
              maxLength: 100
              example: Main cafeteria, near coffee station
            floor:
              type: integer
              nullable: true
              description: Floor number
              maximum: 100
              example: 2
            indoor:
              type: boolean
              nullable: true
              description: Whether machine is indoors
              example: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageInput'
          description: Array of machine images
        metadata:
          $ref: '#/components/schemas/Metadata'
    ImageInput:
      type: object
      description: Image input schema (based on imageSchema from common.js)
      properties:
        url:
          type: string
          format: uri
          description: Image URL
        caption:
          type: string
          nullable: true
          description: Image caption
    Slot:
      type: object
      description: Slot object as returned by the API (based on mapSlotRowToJson)
      properties:
        id:
          type: string
          description: Unique slot identifier
          example: slot-123456789
        organizationId:
          type: string
          description: Organization identifier that owns this slot
          example: org-123456789
        machineId:
          type: string
          description: Machine identifier that contains this slot
          example: machine-123456789
        enabled:
          type: boolean
          description: Whether the slot is enabled
          example: true
        hardwareId:
          type: string
          nullable: true
          description: Hardware identifier for the slot
          example: A1
        productSensor:
          type: boolean
          description: Whether the slot has a product sensor
          example: true
        label:
          type: string
          description: Human-readable slot label
          example: Row A, Column 1 - Beverages
        type:
          type: string
          nullable: true
          description: Slot type/category
          example: cooled
        position:
          type: object
          nullable: true
          description: Position information (conditionally included if row or column is not null)
          properties:
            row:
              type: integer
              nullable: true
              description: Row position
              example: 1
            column:
              type: integer
              nullable: true
              description: Column position
              example: 1
        dimensions:
          type: object
          nullable: true
          description: Dimensions information (conditionally included if height or width is not null)
          properties:
            height:
              type: number
              nullable: true
              description: Slot height
              example: 15.5
            width:
              type: number
              nullable: true
              description: Slot width
              example: 12
            length:
              type: number
              nullable: true
              description: Slot length/depth
              example: 8.5
            unit:
              type: string
              nullable: true
              description: Unit of measurement
              example: cm
        metadata:
          type: object
          description: Additional slot metadata
          example:
            temperatureRange: 2-8°C
            capacity: 10
        doors:
          type: array
          items:
            $ref: '#/components/schemas/Door'
          description: Doors associated with this slot
        createdAt:
          type: string
          format: date-time
          description: When the slot was created
          example: '2025-01-15T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: When the slot was last updated
          example: '2025-01-15T10:30:00.000Z'
    AssignedProduct:
      type: object
      description: Assigned product object as returned by mapAssignedProductRowToJson
      properties:
        organizationProductId:
          type: string
          description: Organization product identifier
          example: orgprod-123456789
        organizationId:
          type: string
          description: Organization identifier
          example: org-123456789
        machineId:
          type: string
          description: Machine identifier
          example: machine-123456789
        slotId:
          type: string
          description: Slot identifier
          example: slot-123456789
        qtyAssigned:
          type: integer
          description: Total quantity assigned to the slot
          example: 10
        qtyAssignedAt:
          type: string
          format: date-time
          description: Timestamp when quantity was assigned
          example: '2025-01-15T10:30:00.000Z'
        qtyLowThreshold:
          type: integer
          description: Low stock threshold
          example: 3
        qtyCurrent:
          type: integer
          description: Current quantity in the slot
          example: 8
        price:
          type: number
          description: Selling price for this assignment
          example: 2.49
        currency:
          type: string
          description: Currency code
          example: USD
        inventoryReport:
          type: object
          description: Inventory report data
          example: {}
        createdAt:
          type: string
          format: date-time
          description: When the assignment was created
          example: '2025-01-15T10:30:00.000Z'
        notes:
          type: string
          nullable: true
          description: Assignment notes
          example: Standard assignment
        enabled:
          type: boolean
          description: Whether the assignment is enabled
          example: true
        expirationDate:
          type: string
          format: date-time
          nullable: true
          description: Product expiration date (conditionally included)
          example: '2025-06-15T00:00:00.000Z'
        product:
          type: object
          description: Embedded product information
          properties:
            externalProductId:
              type: string
              example: SKU-001
            name:
              type: string
              example: Pepsi Max
            description:
              type: string
              example: 12 oz. can
            brand:
              type: string
              example: Pepsi
            category:
              type: string
              example: snacks
            price:
              type: number
              example: 2.49
            currency:
              type: string
              example: USD
            weight:
              type: object
              example: {}
            tempControl:
              type: object
              example: {}
            shelfLifeMax:
              type: integer
              nullable: true
              example: 365
            dimensions:
              type: object
              example: {}
            images:
              type: object
              example: {}
            tags:
              type: array
              items:
                type: string
              nullable: true
              example:
                - beverage
                - cola
            barcode:
              type: string
              nullable: true
              example: '012000000577'
    Metadata:
      type: object
      description: Additional metadata as key-value pairs
      additionalProperties: true
      example: {}
    SlotInput:
      type: object
      description: Input schema for creating or updating slots (based on slotSchema)
      required:
        - machineId
        - label
        - position
      properties:
        organizationId:
          type: string
          description: Organization identifier (optional - will use user's organization if not provided)
          minLength: 1
          maxLength: 255
          example: org-123456789
        machineId:
          type: string
          description: Machine identifier that will contain this slot
          minLength: 1
          maxLength: 255
          example: machine-123456789
        enabled:
          type: boolean
          description: Whether the slot is enabled
          default: true
          example: true
        hardwareId:
          type: string
          nullable: true
          description: Hardware identifier for the slot
          maxLength: 255
          example: A1
        productSensor:
          type: boolean
          description: Whether the slot has a product sensor
          default: false
          example: true
        label:
          type: string
          description: Human-readable slot label
          minLength: 1
          maxLength: 100
          example: Row A, Column 1 - Beverages
        type:
          type: string
          nullable: true
          description: Slot type/category
          maxLength: 100
          example: cooled
        position:
          $ref: '#/components/schemas/PositionInput'
        dimensions:
          $ref: '#/components/schemas/DimensionInput'
        metadata:
          $ref: '#/components/schemas/Metadata'
    Door:
      type: object
      description: Door object as returned by the API (based on mapDoorRowToJson)
      properties:
        id:
          type: string
          description: Unique door identifier
          example: door-123456789
        organizationId:
          type: string
          description: Organization identifier that owns this door
          example: org-123456789
        slotId:
          type: string
          description: Slot identifier that this door belongs to
          example: slot-123456789
        enabled:
          type: boolean
          description: Whether the door is enabled
          example: true
        motorized:
          type: boolean
          description: Whether the door has motorized locking mechanism
          example: false
        orientation:
          type: string
          enum:
            - front
            - rear
            - left
            - right
          description: Door orientation/position
          example: front
        hardwareId:
          type: string
          nullable: true
          description: Hardware identifier for the door
          example: hw-door-001
        position:
          $ref: '#/components/schemas/Position'
        metadata:
          type: object
          description: Additional door metadata
          example: {}
    PositionInput:
      type: object
      description: Position input for creating/updating doors
      properties:
        row:
          type: integer
          nullable: true
          description: Row position (0-based, null values allowed)
          example: 1
        column:
          type: integer
          nullable: true
          description: Column position (0-based, null values allowed)
          example: 2
    DimensionInput:
      type: object
      description: Dimension input for creating/updating slots
      properties:
        height:
          type: number
          nullable: true
          description: Slot height (null values allowed)
          example: 15.5
        width:
          type: number
          nullable: true
          description: Slot width (null values allowed)
          example: 12
        length:
          type: number
          nullable: true
          description: Slot length/depth (null values allowed)
          example: 8.5
        unit:
          type: string
          nullable: true
          description: Unit of measurement
          example: cm
    DoorInput:
      type: object
      description: Input schema for creating or updating doors (based on doorSchema)
      required:
        - slotId
        - enabled
        - motorized
        - orientation
        - position
      properties:
        organizationId:
          type: string
          description: Organization identifier (optional - will use user's organization if not provided)
          minLength: 1
          maxLength: 255
          example: org-123456789
        slotId:
          type: string
          description: Slot identifier that this door belongs to
          minLength: 1
          maxLength: 255
          example: slot-123456789
        enabled:
          type: boolean
          description: Whether the door is enabled
          default: true
          example: true
        motorized:
          type: boolean
          description: Whether the door has motorized locking mechanism
          default: false
          example: false
        hardwareId:
          type: string
          nullable: true
          description: Hardware identifier for the door
          maxLength: 255
          example: hw-door-001
        orientation:
          type: string
          enum:
            - front
            - rear
            - left
            - right
          description: Door orientation/position
          example: front
        position:
          $ref: '#/components/schemas/PositionInput'
        metadata:
          $ref: '#/components/schemas/Metadata'
    Position:
      type: object
      properties:
        row:
          type: integer
          example: 0
        column:
          type: integer
          example: 0
      required:
        - row
        - column
    OrganizationProduct:
      type: object
      description: Organization product object as returned by mapProductRowToJson
      properties:
        id:
          type: string
          description: Organization product unique identifier
          example: orgprod-123e4567-e89b-12d3-a456-426614174000
        externalProductId:
          type: string
          description: External product identifier (SKU) - organization-specific
          example: SKU-001-ORG
        organizationId:
          type: string
          description: Organization identifier that owns this product
          example: org-123456789
        name:
          type: string
          description: Product name
          example: Pepsi Max - Organization Version
        description:
          type: string
          description: Product description
          example: 12 oz. can - Custom pricing
        brand:
          type: string
          description: Product brand
          example: Pepsi
        category:
          type: string
          enum:
            - beverage
            - food
            - snacks
            - hardware
            - safety
            - tools
            - personal
            - other
          description: Product category
          example: snacks
        price:
          type: number
          description: Organization-specific price
          example: 2.99
        currency:
          type: string
          description: Currency code
          example: USD
        weight:
          type: object
          nullable: true
          description: Product weight
          properties:
            value:
              type: number
              example: 355
            unit:
              type: string
              enum:
                - gram
                - ounce
              example: gram
        tempControl:
          type: object
          nullable: true
          description: Temperature control requirements
          properties:
            min:
              type: number
              nullable: true
              example: 2
            max:
              type: number
              nullable: true
              example: 8
            type:
              type: string
              enum:
                - cooled
                - heated
                - ambient
              example: cooled
            unit:
              type: string
              enum:
                - celsius
                - fahrenheit
              nullable: true
              example: celsius
        shelfLifeMax:
          type: integer
          nullable: true
          description: Maximum shelf life in days
          example: 365
        dimensions:
          type: object
          nullable: true
          description: Product dimensions
          properties:
            width:
              type: number
              nullable: true
              example: 6.98
            height:
              type: number
              nullable: true
              example: 12.19
            length:
              type: number
              nullable: true
              example: 6.98
            unit:
              type: string
              enum:
                - mm
                - cm
                - inch
              example: cm
        images:
          type: array
          description: Product images (defaults to empty array)
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
                example: https://cdn.example.com/pepsi-max-org.jpg
              alt:
                type: string
                example: Pepsi Max 12oz can
              tag:
                type: string
                example: primary
        tags:
          type: array
          nullable: true
          items:
            type: string
          description: Product tags
          example:
            - beverage
            - cola
            - sugar-free
        barcode:
          type: string
          nullable: true
          description: Product barcode
          example: '012000000577'
        createdAt:
          type: string
          format: date-time
          description: When the product was created
          example: '2024-01-15T10:30:00.000Z'
    OrganizationProductInput:
      type: object
      description: Input schema for creating/updating organization products (based on productSchema)
      required:
        - externalProductId
        - name
        - description
        - brand
        - category
        - price
        - currency
      properties:
        externalProductId:
          type: string
          minLength: 1
          maxLength: 50
          description: External product identifier (SKU) - organization-specific
          example: SKU-025-ORG
        organizationId:
          type: string
          minLength: 1
          maxLength: 255
          description: Organization identifier (optional - will use authenticated org if not provided)
          example: org-123456789
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Product name
          example: Mountain Dew - Organization Version
        description:
          type: string
          maxLength: 128
          description: Product description
          example: 12 oz. can - Custom pricing
        brand:
          type: string
          maxLength: 128
          description: Product brand
          example: PepsiCo
        category:
          type: string
          enum:
            - beverage
            - food
            - snacks
            - hardware
            - safety
            - tools
            - personal
            - other
          description: Product category
          example: snacks
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Organization-specific product price
          example: 2.79
        currency:
          type: string
          pattern: ^[A-Z]{3}$
          description: ISO 4217 currency code
          example: USD
        shelfLifeMax:
          type: integer
          minimum: 0
          nullable: true
          description: Maximum shelf life in days
          example: 365
        weight:
          type: object
          nullable: true
          properties:
            value:
              type: number
              minimum: 0
              example: 355
            unit:
              type: string
              enum:
                - gram
                - ounce
              example: gram
          description: Product weight
        tempControl:
          type: object
          nullable: true
          properties:
            min:
              type: number
              minimum: 0
              nullable: true
              example: 2
            max:
              type: number
              minimum: 0
              nullable: true
              example: 8
            type:
              type: string
              enum:
                - cooled
                - heated
                - ambient
              example: cooled
            unit:
              type: string
              enum:
                - celsius
                - fahrenheit
              nullable: true
              example: celsius
          description: Temperature control requirements (if min/max set, both must be set with unit; min ≤ max)
        dimensions:
          type: object
          nullable: true
          properties:
            length:
              type: number
              minimum: 0
              nullable: true
              example: 6.98
            width:
              type: number
              minimum: 0
              nullable: true
              example: 6.98
            height:
              type: number
              minimum: 0
              nullable: true
              example: 12.19
            unit:
              type: string
              enum:
                - mm
                - cm
                - inch
              example: cm
          description: Product dimensions (at least one dimension required if provided)
        images:
          type: array
          nullable: true
          items:
            type: object
            required:
              - url
            properties:
              url:
                type: string
                format: uri
                example: https://cdn.example.com/mountain-dew-org.jpg
              alt:
                type: string
                example: Mountain Dew 12oz can
              tag:
                type: string
                example: primary
          description: Product images
        tags:
          type: array
          nullable: true
          items:
            type: string
          description: Product tags
          example:
            - beverage
            - citrus
            - caffeinated
        barcode:
          type: string
          maxLength: 128
          nullable: true
          description: Product barcode
          example: '012000001628'
    AssignedProductInput:
      type: object
      description: Input schema for creating assigned products (based on assignedProductSchema)
      required:
        - slotId
        - organizationProductId
        - price
        - currency
      properties:
        slotId:
          type: string
          minLength: 1
          description: Slot identifier
          example: slot-123456789
        organizationId:
          type: string
          minLength: 1
          description: Organization identifier (optional - will use authenticated org if not provided)
          example: org-123456789
        organizationProductId:
          type: string
          minLength: 1
          description: Organization product identifier
          example: orgprod-123456789
        qtyAssigned:
          type: integer
          minimum: 0
          default: 0
          description: Total quantity assigned to the slot
          example: 10
        qtyCurrent:
          type: integer
          minimum: 0
          nullable: true
          description: Current quantity in the slot
          example: 8
        qtyLowThreshold:
          type: integer
          minimum: 0
          default: 0
          description: Low stock threshold
          example: 3
        qtyAssignedAt:
          type: string
          format: date-time
          description: Timestamp when quantity was assigned (ISO string)
          example: '2025-01-15T10:30:00.000Z'
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Selling price for this assignment
          example: 2.49
        currency:
          type: string
          pattern: ^[A-Z]{3}$
          description: ISO 4217 currency code
          example: USD
        inventoryReport:
          type: object
          description: Inventory report data (report schema from common.js)
        notes:
          type: string
          maxLength: 255
          description: Assignment notes
          example: Initial assignment
        expirationDate:
          type: string
          format: date-time
          nullable: true
          description: Product expiration date (ISO string)
          example: '2025-06-15T00:00:00.000Z'
        enabled:
          type: boolean
          default: true
          description: Whether the assignment is enabled
          example: true
    AssignedProductSlotInput:
      type: object
      description: Input schema for slot-specific assignment (excludes slotId since it's in the path)
      required:
        - organizationProductId
        - price
        - currency
      properties:
        organizationId:
          type: string
          minLength: 1
          description: Organization identifier (optional)
          example: org-123456789
        organizationProductId:
          type: string
          minLength: 1
          description: Organization product identifier
          example: orgprod-123456789
        qtyAssigned:
          type: integer
          minimum: 0
          default: 0
          description: Total quantity assigned to the slot
          example: 10
        qtyCurrent:
          type: integer
          minimum: 0
          nullable: true
          description: Current quantity in the slot
          example: 8
        qtyLowThreshold:
          type: integer
          minimum: 0
          default: 0
          description: Low stock threshold
          example: 3
        qtyAssignedAt:
          type: string
          format: date-time
          description: Timestamp when quantity was assigned
          example: '2025-01-15T10:30:00.000Z'
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Selling price for this assignment
          example: 2.49
        currency:
          type: string
          pattern: ^[A-Z]{3}$
          description: ISO 4217 currency code
          example: USD
        inventoryReport:
          type: object
          description: Inventory report data
        notes:
          type: string
          maxLength: 255
          description: Assignment notes
          example: Slot-specific assignment
        expirationDate:
          type: string
          format: date-time
          nullable: true
          description: Product expiration date
          example: '2025-06-15T00:00:00.000Z'
        enabled:
          type: boolean
          default: true
          description: Whether the assignment is enabled
          example: true
    AssignedProductPatch:
      type: object
      properties:
        organizationId:
          type: string
          minLength: 1
          description: Organization identifier (for root users only)
          example: org-123456789
        qtyCurrent:
          type: integer
          minimum: 0
          description: Current quantity in the slot
          example: 5
        qtyAssigned:
          type: integer
          minimum: 0
          description: Total assigned quantity
          example: 10
        qtyLowThreshold:
          type: integer
          minimum: 0
          description: Low threshold quantity
          example: 2
        qtyAssignedAt:
          type: string
          format: date-time
          description: Timestamp when quantity was assigned (required if qtyCurrent provided)
          example: '2025-01-15T14:30:00.000Z'
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Selling price
          example: 2.99
        currency:
          type: string
          pattern: ^[A-Z]{3}$
          description: ISO 4217 currency code
          example: USD
      additionalProperties: false
      minProperties: 1
      description: |
        At least one field must be provided.
        If qtyCurrent is provided, qtyAssignedAt must also be provided.
        If both qtyCurrent and qtyAssigned are provided, qtyCurrent must be <= qtyAssigned.
    AssignedProductsResponse:
      type: object
      description: Response schema for list endpoints
      properties:
        assignedProducts:
          type: array
          items:
            $ref: '#/components/schemas/AssignedProduct'
          description: List of assigned products
        pagination:
          $ref: '#/components/schemas/Pagination'
    PublishedCatalog:
      type: object
      description: Published catalog object as returned by mapPublishedCatalogRowToJson
      properties:
        machineId:
          type: string
          description: Machine this catalog belongs to
          example: 0a240011-d248-4733-bb38-5cf93a1fb12b
        organizationId:
          type: string
          description: Organization that owns this catalog
          example: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
        unpublishedData:
          type: boolean
          description: Whether there is unpublished data for this machine
          example: true
        hash:
          type: string
          description: Hash of the published data for comparison
          example: 2b808d6e521c493b48541f515d891723414fd87131b790c67a27223e6a2ca429
        type:
          type: string
          description: Type of published data
          example: machine
        data:
          $ref: '#/components/schemas/PublishedCatalogData'
        updatedAt:
          type: string
          format: date-time
          description: When the catalog was last updated
          example: '2025-10-13T20:16:45.199Z'
      required:
        - machineId
        - organizationId
        - unpublishedData
        - hash
        - type
        - data
        - updatedAt
    PublishedCatalogData:
      type: object
      description: The nested data structure containing configuration and catalog
      properties:
        data:
          type: object
          properties:
            config:
              $ref: '#/components/schemas/ConfigSection'
            catalog:
              $ref: '#/components/schemas/CatalogSection'
          required:
            - config
            - catalog
        hash:
          type: string
          description: Overall hash of the combined data
          example: 2b808d6e521c493b48541f515d891723414fd87131b790c67a27223e6a2ca429
      required:
        - data
        - hash
    ConfigSection:
      type: object
      description: Machine configuration section
      properties:
        data:
          type: object
          properties:
            store:
              $ref: '#/components/schemas/StoreConfig'
            machine:
              $ref: '#/components/schemas/MachineConfig'
            organization:
              $ref: '#/components/schemas/OrganizationConfig'
          required:
            - store
            - machine
            - organization
        hash:
          type: string
          description: Hash of the configuration data
          example: b2dbdae6b35dc4cdb87776426f819307599d1401aba381a96d4f3b6b8647580c
      required:
        - data
        - hash
    CatalogSection:
      type: object
      description: Machine catalog section with assigned products
      properties:
        data:
          type: object
          properties:
            assignedProducts:
              type: array
              items:
                $ref: '#/components/schemas/AssignedProductConfig'
              description: Products assigned to machine slots
          required:
            - assignedProducts
        hash:
          type: string
          description: Hash of the catalog data
          example: 69ad537888633a9fe581d9bba21219ba514eb984c7a540c607c5455b1b8d192d
      required:
        - data
        - hash
    StoreConfig:
      type: object
      description: Store configuration
      properties:
        name:
          type: string
          example: Intensive Care Unit
        storeId:
          type: string
          example: baf31c97-1804-47c4-b93c-9e654dbdcf92
        organizationId:
          type: string
          example: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
        description:
          type: string
          nullable: true
          example: West Wing lower level
        hours:
          type: object
          description: Store operating hours
          example: {}
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact'
      required:
        - name
        - storeId
        - organizationId
        - hours
        - address
        - contact
    MachineConfig:
      type: object
      description: Machine configuration
      properties:
        name:
          type: string
          example: NIC-U
        machineId:
          type: string
          example: 0a240011-d248-4733-bb38-5cf93a1fb12b
        organizationId:
          type: string
          example: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
        storeId:
          type: string
          example: baf31c97-1804-47c4-b93c-9e654dbdcf92
        model:
          type: string
          example: VLX1800-A
        serialNumber:
          type: string
          example: ZX434FD33
        slots:
          type: array
          items:
            $ref: '#/components/schemas/SlotConfig'
          description: Machine slot configurations
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageConfig'
          description: Machine images
        location:
          $ref: '#/components/schemas/LocationConfig'
        metadata:
          type: object
          description: Machine-specific metadata
          properties:
            tcpModbusIp:
              type: string
              example: 10.1.1.45
            brandLogoUrl:
              type: string
              format: uri
              example: https://vendistax-branding.s3.us-west-2.amazonaws.com/athenos/athenos.png
            useTcpModbus:
              type: boolean
              example: true
            purchaseCodeLength:
              type: integer
              example: 4
          additionalProperties: true
      required:
        - name
        - machineId
        - organizationId
        - storeId
        - model
        - serialNumber
        - slots
        - images
        - location
        - metadata
    OrganizationConfig:
      type: object
      description: Organization configuration
      properties:
        name:
          type: string
          example: Athenos Medical
        organizationId:
          type: string
          example: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
        description:
          type: string
          example: S.B. Campusa
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact'
      required:
        - name
        - organizationId
        - address
        - contact
    SlotConfig:
      type: object
      description: Machine slot configuration
      properties:
        id:
          type: string
          example: b0c2adf1-60b3-4790-89e4-af1273037cea
        machineId:
          type: string
          example: 0a240011-d248-4733-bb38-5cf93a1fb12b
        organizationId:
          type: string
          example: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
        label:
          type: string
          example: Locker1
        type:
          type: string
          enum:
            - ambient
            - cooled
            - heated
          example: ambient
        enabled:
          type: boolean
          example: true
        productSensor:
          type: boolean
          example: true
        hardwareId:
          type: string
          nullable: true
          example: ''
        position:
          $ref: '#/components/schemas/Position'
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        doors:
          type: array
          items:
            $ref: '#/components/schemas/DoorConfig'
          description: Slot door configurations
        metadata:
          type: object
          description: Slot-specific metadata
          example: {}
      required:
        - id
        - machineId
        - organizationId
        - label
        - type
        - enabled
        - productSensor
        - position
        - dimensions
        - doors
        - metadata
    DoorConfig:
      type: object
      description: Door configuration for a slot
      properties:
        id:
          type: string
          example: 2b8168b3-ddb2-4d45-b0ab-c461039f9eae
        enabled:
          type: boolean
          example: true
        motorized:
          type: boolean
          example: false
        orientation:
          type: string
          enum:
            - front
            - back
            - left
            - right
            - top
            - bottom
          example: front
        hardwareId:
          type: string
          nullable: true
          example: null
        position:
          $ref: '#/components/schemas/Position'
        metadata:
          type: object
          description: Door-specific metadata
          example: {}
      required:
        - id
        - enabled
        - motorized
        - orientation
        - position
        - metadata
    AssignedProductConfig:
      type: object
      description: Product assigned to a machine slot (for machine configuration)
      properties:
        slotId:
          type: string
          example: b0c2adf1-60b3-4790-89e4-af1273037cea
        machineId:
          type: string
          example: 0a240011-d248-4733-bb38-5cf93a1fb12b
        organizationId:
          type: string
          example: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
        organizationProductId:
          type: string
          example: f0f17fef-1296-4312-85ce-ef900a126a0e
        enabled:
          type: boolean
          example: true
        price:
          type: string
          description: Price as string for precision
          example: '20.00'
        currency:
          type: string
          example: USD
        qtyAssigned:
          type: integer
          example: 10
        qtyCurrent:
          type: integer
          example: 10
        qtyLowThreshold:
          type: integer
          example: 3
        qtyAssignedAt:
          type: string
          format: date-time
          example: '2025-10-13T20:14:51.785Z'
        createdAt:
          type: string
          format: date-time
          example: '2025-10-13T19:10:43.531Z'
        notes:
          type: string
          nullable: true
          example: null
        inventoryReport:
          type: object
          description: Inventory report data
          example: {}
        product:
          $ref: '#/components/schemas/ProductConfig'
      required:
        - slotId
        - machineId
        - organizationId
        - organizationProductId
        - enabled
        - price
        - currency
        - qtyAssigned
        - qtyCurrent
        - qtyLowThreshold
        - qtyAssignedAt
        - createdAt
        - inventoryReport
        - product
    ProductConfig:
      type: object
      description: Product information in machine configuration
      properties:
        name:
          type: string
          example: Bedding
        externalProductId:
          type: string
          example: SKU-BDNG-234554
        description:
          type: string
          example: Package of disposable bedding
        brand:
          type: string
          example: Vallence
        category:
          type: string
          enum:
            - beverage
            - food
            - snacks
            - hardware
            - safety
            - tools
            - personal
            - other
          example: other
        price:
          type: string
          description: Price as string for precision
          example: '20.00'
        currency:
          type: string
          example: USD
        weight:
          type: object
          nullable: true
          properties:
            value:
              type: number
              example: 1500
            unit:
              type: string
              enum:
                - gram
                - ounce
              example: gram
        tempControl:
          type: object
          properties:
            min:
              type: number
              example: 0
            max:
              type: number
              example: 0
            type:
              type: string
              enum:
                - cooled
                - heated
                - ambient
              example: ambient
            unit:
              type: string
              enum:
                - celsius
                - fahrenheit
              example: celsius
        shelfLifeMax:
          type: integer
          nullable: true
          example: null
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageConfig'
          example:
            - tag: main
              url: https://vendistax-product-pics.s3.us-west-2.amazonaws.com/medical-supplies/bedding.png
        tags:
          type: array
          items:
            type: string
          example: []
        barcode:
          type: string
          nullable: true
          example: null
      required:
        - name
        - externalProductId
        - description
        - brand
        - category
        - price
        - currency
        - images
        - tags
    Dimensions:
      type: object
      properties:
        width:
          type: number
          nullable: true
          example: 30
        height:
          type: number
          nullable: true
          example: 25
        length:
          type: number
          nullable: true
          example: 12
        unit:
          type: string
          enum:
            - mm
            - cm
            - inch
          example: cm
      required:
        - unit
    LocationConfig:
      type: object
      properties:
        floor:
          type: integer
          example: 2
        indoor:
          type: boolean
          example: true
        description:
          type: string
          nullable: true
          example: null
      required:
        - floor
        - indoor
    ImageConfig:
      type: object
      properties:
        url:
          type: string
          format: uri
          example: https://vendistax-branding.s3.us-west-2.amazonaws.com/athenos/athenos.png
        tag:
          type: string
          example: main image
      required:
        - url
        - tag
    PublishCatalogRequest:
      type: object
      description: Input schema for publishing catalogs (based on publicationSchema)
      required:
        - machineId
      properties:
        organizationId:
          type: string
          description: Organization identifier (optional - for root users only, others use orgId from API key)
          example: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
        machineId:
          type: string
          minLength: 1
          description: Machine identifier to publish catalog for
          example: 0a240011-d248-4733-bb38-5cf93a1fb12b
    ConsentInfo:
      type: object
      description: Consent information for different notification channels
      properties:
        email:
          type: boolean
          description: Consent for email notifications
          example: true
        sms:
          type: boolean
          description: Consent for SMS notifications
          example: false
        push:
          type: boolean
          description: Consent for push/webhook notifications
          example: false
        timestamp:
          type: string
          format: date-time
          nullable: true
          description: When consent was last given
          example: '2025-01-15T10:30:00.000Z'
        method:
          type: string
          enum:
            - web_form
            - admin_added
            - sms_opt_in
            - api
          description: How consent was obtained
          example: web_form
      required:
        - email
        - sms
        - push
        - method
    OptOutInfo:
      type: object
      description: Opt-out information
      properties:
        timestamp:
          type: string
          format: date-time
          nullable: true
          description: When the client opted out
          example: null
        reason:
          type: string
          nullable: true
          description: Reason for opting out
          example: null
      required:
        - timestamp
        - reason
    NotificationClientInput:
      type: object
      description: Input schema for creating notification clients (based on createNotificationClientSchema)
      required:
        - name
      properties:
        organizationId:
          type: string
          description: Organization ID (optional - will be set by middleware)
          example: org-123456789
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Human-readable name for the client
          example: John Doe
        email:
          type: string
          format: email
          maxLength: 255
          nullable: true
          description: Email address for email notifications
          example: john.doe@example.com
        phone:
          type: string
          pattern: ^\+?[1-9]\d{1,14}$
          maxLength: 20
          nullable: true
          description: Phone number in international format
          example: '+12345678900'
        webhookUrl:
          type: string
          format: uri
          maxLength: 500
          nullable: true
          description: Webhook URL for webhook/push notifications
          example: https://api.example.com/webhooks/alerts
        secret:
          type: string
          minLength: 8
          maxLength: 64
          nullable: true
          description: Secret for webhook authentication (min 8 chars)
          example: webhook-secret-123
        preferredChannel:
          type: string
          enum:
            - email
            - sms
            - webhook
            - slack
            - teams
          nullable: true
          description: Preferred notification channel
          example: email
        enabled:
          type: boolean
          default: true
          description: Whether the client should be enabled
          example: true
        consent:
          type: object
          description: Consent settings for different channels
          properties:
            email:
              type: boolean
              default: false
              description: Consent for email notifications
            sms:
              type: boolean
              default: false
              description: Consent for SMS notifications
            push:
              type: boolean
              default: false
              description: Consent for push notifications
            method:
              type: string
              enum:
                - web_form
                - admin_added
                - sms_opt_in
                - api
              default: admin_added
              description: How consent was obtained
          example:
            email: true
            sms: false
            push: false
            method: web_form
    NotificationClientUpdateInput:
      type: object
      description: Input schema for updating notification clients (based on updateNotificationClientSchema)
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Human-readable name for the client
          example: John Doe Updated
        email:
          type: string
          format: email
          maxLength: 255
          nullable: true
          description: Email address for email notifications
          example: newemail@example.com
        phone:
          type: string
          pattern: ^\+?[1-9]\d{1,14}$
          maxLength: 20
          nullable: true
          description: Phone number in international format
          example: '+12345678901'
        webhookUrl:
          type: string
          format: uri
          maxLength: 500
          nullable: true
          description: Webhook URL for webhook/push notifications
          example: https://newapi.example.com/webhooks
        secret:
          type: string
          minLength: 8
          maxLength: 64
          nullable: true
          description: Secret for webhook authentication
          example: new-webhook-secret
        preferredChannel:
          type: string
          enum:
            - email
            - sms
            - webhook
            - slack
            - teams
          nullable: true
          description: Preferred notification channel
          example: sms
        enabled:
          type: boolean
          description: Whether the client should be enabled
          example: false
        consent:
          type: object
          description: Consent settings for different channels
          properties:
            email:
              type: boolean
              description: Consent for email notifications
            sms:
              type: boolean
              description: Consent for SMS notifications
            push:
              type: boolean
              description: Consent for push notifications
            method:
              type: string
              enum:
                - web_form
                - admin_added
                - sms_opt_in
                - api
              description: How consent was obtained
          example:
            email: false
            sms: true
            method: admin_added
    OptOutInput:
      type: object
      description: Input schema for opting out clients (based on optOutSchema)
      properties:
        reason:
          type: string
          minLength: 1
          maxLength: 500
          default: User requested
          description: Reason for opting out
          example: User no longer wants to receive notifications
    OptInInput:
      type: object
      description: Input schema for opting in clients (based on optInSchema)
      properties:
        consent_method:
          type: string
          enum:
            - web_form
            - admin_added
            - sms_opt_in
            - api
          default: admin_added
          description: How consent was obtained
          example: admin_added
    NotificationSubscription:
      type: object
      description: Notification subscription object as returned by mapNotificationSubscriptionRowToJson
      properties:
        id:
          type: string
          description: Unique notification subscription identifier
          example: sub-123456789
        organizationId:
          type: string
          description: Organization this subscription belongs to
          example: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
        storeId:
          type: string
          description: Store this subscription is for
          example: baf31c97-1804-47c4-b93c-9e654dbdcf92
        storeName:
          type: string
          nullable: true
          description: Name of the store (from join)
          example: Intensive Care Unit
        machineId:
          type: string
          nullable: true
          description: Specific machine this subscription is for (optional)
          example: 0a240011-d248-4733-bb38-5cf93a1fb12b
        machineName:
          type: string
          nullable: true
          description: Name of the machine (from join)
          example: NIC-U
        notificationClientId:
          type: string
          description: Client that will receive notifications
          example: nc-123456789
        clientName:
          type: string
          nullable: true
          description: Name of the notification client (from join)
          example: John Doe
        clientEmail:
          type: string
          nullable: true
          description: Email of the notification client (from join)
          example: john.doe@example.com
        tags:
          type: array
          items:
            type: string
          description: Notification tags this subscription covers
          example:
            - inventory_low
            - machine_error
        frequency:
          type: string
          description: How often notifications should be sent
          example: immediate
        lastNotificationAt:
          type: string
          format: date-time
          nullable: true
          description: When the last notification was sent
          example: '2025-01-15T14:30:00.000Z'
        enabled:
          type: boolean
          description: Whether the subscription is active
          example: true
        metadata:
          type: object
          description: Additional metadata for the subscription
          example: {}
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
          description: When the subscription was created
          example: '2025-01-15T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: When the subscription was last updated
          example: '2025-01-15T10:30:00.000Z'
      required:
        - id
        - organizationId
        - storeId
        - notificationClientId
        - tags
        - frequency
        - enabled
        - metadata
        - createdAt
        - updatedAt
    NotificationSubscriptionInput:
      type: object
      description: Input schema for creating/updating notification subscriptions (based on notificationSubscriptionSchema)
      required:
        - storeId
        - notificationClientId
        - tags
      properties:
        organizationId:
          type: string
          description: Organization ID (optional - will be set by middleware)
          example: 970fc072-8588-4eb0-9eff-0a7aa8dcc2b6
        storeId:
          type: string
          minLength: 1
          description: Store ID is required
          example: baf31c97-1804-47c4-b93c-9e654dbdcf92
        machineId:
          type: string
          nullable: true
          description: Machine ID (optional for store-level subscriptions)
          example: 0a240011-d248-4733-bb38-5cf93a1fb12b
          default: null
        notificationClientId:
          type: string
          minLength: 1
          description: Notification client ID is required
          example: nc-123456789
        tags:
          type: array
          items:
            type: string
            enum:
              - inventory_low
              - inventory_critical
              - inventory_out
              - machine_error
              - machine_offline
              - machine_maintenance_due
              - door_open
              - door_stuck
              - payment_error
              - payment_failed
              - temperature_warning
              - temperature_critical
              - power_outage
              - network_error
              - daily_report
              - weekly_report
              - monthly_report
              - inventory_summary
              - sales_report
              - maintenance_report
          minItems: 1
          description: List of notification tags to subscribe to
          example:
            - inventory_low
            - machine_error
        frequency:
          type: string
          default: immediate
          description: Notification frequency
          example: immediate
        enabled:
          type: boolean
          default: true
          description: Whether the subscription should be enabled
          example: true
        metadata:
          type: object
          description: Additional metadata for the subscription
          example: {}
          additionalProperties: true
      additionalProperties: false
    Receipt:
      type: object
      description: Receipt object as returned by mapReceiptToJson
      properties:
        receiptId:
          type: string
          description: Unique receipt identifier
          example: receipt-123456789
        organizationId:
          type: string
          description: Organization identifier
          example: org-123456789
        storeId:
          type: string
          description: Store identifier where the sale occurred
          example: store-123456789
        machineId:
          type: string
          description: Machine identifier where the sale occurred
          example: machine-123456789
        total:
          type: number
          description: Total amount of the sale
          example: 5.47
        tax:
          type: number
          description: Tax amount
          example: 0.47
        currency:
          type: string
          description: Currency code
          example: USD
        recordedAt:
          type: string
          format: date-time
          description: When the sale was recorded
          example: '2025-01-15T14:30:00.000Z'
        payment:
          type: object
          description: Payment information
          example:
            method: credit_card
            cardType: visa
            last4: '1234'
        metadata:
          type: object
          description: Additional receipt metadata
          example:
            transactionId: txn_abc123
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReceiptItem'
          description: List of items in the receipt
        createdAt:
          type: string
          format: date-time
          description: When the receipt was created in the system
          example: '2025-01-15T14:30:00.000Z'
    ReceiptItem:
      type: object
      description: Individual item in a receipt
      properties:
        organizationProductId:
          type: string
          description: Organization-specific product identifier
          example: org-prod-123
        slotId:
          type: string
          description: Slot identifier where the product was dispensed
          example: slot-123456789
        externalProductId:
          type: string
          description: External product identifier
          example: prod-pepsi-355ml
        unitPrice:
          type: number
          description: Price per unit
          example: 2.49
        qty:
          type: integer
          description: Quantity sold
          example: 2
    ReceiptInput:
      type: object
      description: Input schema for creating receipts
      required:
        - organizationId
        - machineId
        - total
        - currency
        - recordedAt
        - items
      properties:
        organizationId:
          type: string
          description: Organization identifier
          example: org-123456789
        machineId:
          type: string
          description: Machine identifier where the sale occurred
          example: machine-123456789
        total:
          type: number
          description: Total amount of the sale
          minimum: 0
          example: 5.47
        tax:
          type: number
          description: Tax amount
          minimum: 0
          example: 0.47
        currency:
          type: string
          description: Currency code (3-letter ISO code)
          minLength: 3
          maxLength: 3
          example: USD
        recordedAt:
          type: string
          format: date-time
          description: When the sale was recorded
          example: '2025-01-15T14:30:00.000Z'
        payment:
          type: object
          description: Payment information (optional)
        metadata:
          type: object
          description: Additional receipt metadata (optional)
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReceiptItemInput'
          minItems: 1
          description: List of items in the receipt
    ReceiptItemInput:
      type: object
      description: Input schema for receipt items
      required:
        - organizationProductId
        - slotId
        - externalProductId
        - unitPrice
        - qty
      properties:
        organizationProductId:
          type: string
          description: Organization-specific product identifier
          example: org-prod-123
        slotId:
          type: string
          description: Slot identifier where the product was dispensed
          example: slot-123456789
        externalProductId:
          type: string
          description: External product identifier
          example: prod-pepsi-355ml
        unitPrice:
          type: number
          description: Price per unit
          minimum: 0
          example: 2.49
        qty:
          type: integer
          description: Quantity sold
          minimum: 1
          example: 2
    IoTSaleInput:
      type: object
      description: Sales receipt input for IoT devices (uses saleSchema validation)
      required:
        - organizationId
        - machineId
        - total
        - currency
        - recordedAt
        - items
      properties:
        organizationId:
          type: string
          description: Organization identifier (must match machine credentials)
          example: org-123456789
        machineId:
          type: string
          description: Machine identifier (must match device credentials)
          example: machine-123456789
        total:
          type: number
          description: Total amount of the sale
          minimum: 0
          example: 5.47
        tax:
          type: number
          description: Tax amount
          minimum: 0
          example: 0.47
        currency:
          type: string
          description: Currency code (3-letter ISO code)
          minLength: 3
          maxLength: 3
          example: USD
        recordedAt:
          type: string
          format: date-time
          description: When the sale was recorded (ISO string)
          example: '2025-01-15T14:30:00.000Z'
        payment:
          type: object
          description: Payment information (optional)
          example:
            method: credit_card
            cardType: visa
            last4: '1234'
        metadata:
          type: object
          description: Additional sale metadata (optional)
          example:
            transactionId: txn_abc123
            promotionCode: WINTER10
        items:
          type: array
          items:
            $ref: '#/components/schemas/IoTSaleItem'
          minItems: 1
          description: List of items in the sale
    IoTSaleItem:
      type: object
      description: Individual sale item for IoT devices
      required:
        - organizationProductId
        - slotId
        - externalProductId
        - unitPrice
        - qty
      properties:
        organizationProductId:
          type: string
          description: Organization-specific product identifier
          example: org-prod-123
        slotId:
          type: string
          description: Slot identifier where the product was dispensed
          example: slot-123456789
        externalProductId:
          type: string
          description: External product identifier
          example: prod-pepsi-355ml
        unitPrice:
          type: number
          description: Price per unit
          minimum: 0
          example: 2.49
        qty:
          type: integer
          description: Quantity sold
          minimum: 1
          example: 2
    TelemetryEventInput:
      type: object
      description: Telemetry event input for IoT devices (uses telemetrySchema validation)
      required:
        - organizationId
        - machineId
        - eventType
        - recordedAt
      properties:
        organizationId:
          type: string
          description: Organization identifier (must match machine credentials)
          example: org-123456789
        storeId:
          type: string
          description: Store identifier (optional - will be determined from machine)
          example: store-123456789
        machineId:
          type: string
          description: Machine identifier (must match device credentials)
          example: machine-123456789
        eventType:
          type: string
          description: Type of telemetry event
          example: door_opened
        recordedAt:
          type: string
          format: date-time
          description: When the event was recorded (ISO string)
          example: '2025-01-15T14:30:00.000Z'
        metadata:
          type: object
          description: Event-specific metadata (optional)
          example:
            duration: 15
            location: front_door
            temperature: 4.2
    TelemetryEvent:
      type: object
      description: Telemetry event object as returned by mapTelemetryEventToJson
      properties:
        id:
          type: string
          description: Unique event identifier
          example: telem-123456789
        organizationId:
          type: string
          description: Organization identifier
          example: org-123456789
        storeId:
          type: string
          description: Store identifier
          example: store-123456789
        machineId:
          type: string
          description: Machine identifier
          example: machine-123456789
        eventType:
          type: string
          description: Type of telemetry event
          example: door_opened
        recordedAt:
          type: string
          format: date-time
          description: When the event was recorded
          example: '2025-01-15T14:30:00.000Z'
        metadata:
          type: object
          description: Event-specific metadata
          example:
            duration: 15
            location: front_door
            temperature: 4.2
        createdAt:
          type: string
          format: date-time
          description: When the event was created in the system
          example: '2025-01-15T14:30:00.000Z'
    MachineConfiguration:
      type: object
      description: Complete machine configuration including config and catalog data
      properties:
        data:
          type: object
          properties:
            config:
              $ref: '#/components/schemas/ConfigSection'
            catalog:
              $ref: '#/components/schemas/CatalogSection'
          required:
            - config
            - catalog
      required:
        - data
  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validation-error:
              summary: Validation error
              value:
                error: Validation failed
                details:
                  - field: globalProductId
                    message: Global product ID is required
                  - field: price
                    message: Price must be greater than 0
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Internal server error
    Unauthorized:
      description: Unauthorized - Invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Unauthorized
    Forbidden:
      description: Forbidden - Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Access denied
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            product-not-found:
              summary: Organization product not found
              value:
                error: Organization product not found
