/**
 * Autogenerated API smoke tests from combined.yaml
 * Requirements:
 *   - Jest
 *   - ts-jest (if using TypeScript)
 *   - axios
 *
 * Env:
 *   BASE_URL (default: http://localhost:3000)
 *   API_KEY (required)
 *   JWT (optional)
 */

import axios, { AxiosRequestHeaders } from "axios";

const BASE = process.env.BASE_URL || "http://localhost:3000";
const API_KEY = process.env.API_KEY || "";
const JWT = process.env.JWT || "";

if (!API_KEY) {
  // eslint-disable-next-line no-console
  console.warn("API_KEY not set; tests will send Authorization with empty key which will likely fail auth.");
}

function authHeaders(): AxiosRequestHeaders {
  const h: AxiosRequestHeaders = {
    "Authorization": `Bearer ${API_KEY}`,
    "x-api-key": API_KEY,
    "Content-Type": "application/json"
  };
  if (JWT) {
    h["Cookie"] = `jwt=${JWT}`;
  }
  return h;
}

type PathSpec = {
  method: string;
  path: string;
};

const endpoints: PathSpec[] = [
  {
    "method": "post",
    "path": "/users/register"
  },
  {
    "method": "post",
    "path": "/users/login"
  },
  {
    "method": "post",
    "path": "/users/login/api-key"
  },
  {
    "method": "get",
    "path": "/users/lockout-status/{email}"
  },
  {
    "method": "get",
    "path": "/auth/api-key"
  },
  {
    "method": "post",
    "path": "/auth/api-key"
  },
  {
    "method": "get",
    "path": "/auth/api-key/current"
  },
  {
    "method": "delete",
    "path": "/auth/api-key/{id}"
  },
  {
    "method": "put",
    "path": "/auth/api-key/{id}/revoke"
  },
  {
    "method": "put",
    "path": "/auth/api-key/{id}/restore"
  },
  {
    "method": "post",
    "path": "/auth/otp"
  },
  {
    "method": "get",
    "path": "/auth/otp/{otp_code}"
  },
  {
    "method": "post",
    "path": "/auth/otp/redeem"
  },
  {
    "method": "post",
    "path": "/auth/dashboard-token"
  },
  {
    "method": "get",
    "path": "/organizations"
  },
  {
    "method": "post",
    "path": "/organizations"
  },
  {
    "method": "get",
    "path": "/organizations/{id}"
  },
  {
    "method": "put",
    "path": "/organizations/{id}"
  },
  {
    "method": "delete",
    "path": "/organizations/{id}"
  },
  {
    "method": "get",
    "path": "/organizations/{id}/stores"
  },
  {
    "method": "get",
    "path": "/organizations/{id}/machines"
  },
  {
    "method": "get",
    "path": "/organizations/{id}/notification-clients"
  },
  {
    "method": "get",
    "path": "/stores"
  },
  {
    "method": "post",
    "path": "/stores"
  },
  {
    "method": "get",
    "path": "/stores/{id}"
  },
  {
    "method": "put",
    "path": "/stores/{id}"
  },
  {
    "method": "delete",
    "path": "/stores/{id}"
  },
  {
    "method": "get",
    "path": "/stores/{id}/machines"
  },
  {
    "method": "get",
    "path": "/machines"
  },
  {
    "method": "post",
    "path": "/machines"
  },
  {
    "method": "get",
    "path": "/machines/{id}"
  },
  {
    "method": "put",
    "path": "/machines/{id}"
  },
  {
    "method": "delete",
    "path": "/machines/{id}"
  },
  {
    "method": "get",
    "path": "/machines/{id}/slots"
  },
  {
    "method": "get",
    "path": "/machines/{id}/assigned-products"
  },
  {
    "method": "get",
    "path": "/slots"
  },
  {
    "method": "post",
    "path": "/slots"
  },
  {
    "method": "get",
    "path": "/slots/{id}"
  },
  {
    "method": "put",
    "path": "/slots/{id}"
  },
  {
    "method": "delete",
    "path": "/slots/{id}"
  },
  {
    "method": "get",
    "path": "/slots/{id}/doors"
  },
  {
    "method": "patch",
    "path": "/slots/{id}/inventory"
  },
  {
    "method": "get",
    "path": "/doors"
  },
  {
    "method": "post",
    "path": "/doors"
  },
  {
    "method": "get",
    "path": "/doors/{id}"
  },
  {
    "method": "put",
    "path": "/doors/{id}"
  },
  {
    "method": "delete",
    "path": "/doors/{id}"
  },
  {
    "method": "post",
    "path": "/doors/{id}/lock"
  },
  {
    "method": "post",
    "path": "/doors/{id}/unlock"
  },
  {
    "method": "get",
    "path": "/organization-products"
  },
  {
    "method": "post",
    "path": "/organization-products"
  },
  {
    "method": "get",
    "path": "/organization-products/{id}"
  },
  {
    "method": "put",
    "path": "/organization-products/{id}"
  },
  {
    "method": "delete",
    "path": "/organization-products/{id}"
  },
  {
    "method": "get",
    "path": "/organization-products/category/{category}"
  },
  {
    "method": "get",
    "path": "/organization-products/brand/{brand}"
  },
  {
    "method": "get",
    "path": "/organization-products/organization/{orgId}"
  },
  {
    "method": "get",
    "path": "/assigned-products"
  },
  {
    "method": "post",
    "path": "/assigned-products"
  },
  {
    "method": "get",
    "path": "/assigned-products/organization/{orgId}"
  },
  {
    "method": "get",
    "path": "/assigned-products/slot/{slotId}"
  },
  {
    "method": "post",
    "path": "/assigned-products/slot/{slotId}"
  },
  {
    "method": "put",
    "path": "/assigned-products/slot/{slotId}"
  },
  {
    "method": "patch",
    "path": "/assigned-products/slot/{slotId}"
  },
  {
    "method": "delete",
    "path": "/assigned-products/slot/{slotId}"
  },
  {
    "method": "get",
    "path": "/published-catalogs/{machineId}"
  },
  {
    "method": "post",
    "path": "/published-catalogs"
  },
  {
    "method": "get",
    "path": "/notification-clients"
  },
  {
    "method": "post",
    "path": "/notification-clients"
  },
  {
    "method": "get",
    "path": "/notification-clients/{id}"
  },
  {
    "method": "put",
    "path": "/notification-clients/{id}"
  },
  {
    "method": "delete",
    "path": "/notification-clients/{id}"
  },
  {
    "method": "post",
    "path": "/notification-clients/{id}/opt-out"
  },
  {
    "method": "post",
    "path": "/notification-clients/{id}/opt-in"
  },
  {
    "method": "get",
    "path": "/notification-subscriptions"
  },
  {
    "method": "post",
    "path": "/notification-subscriptions"
  },
  {
    "method": "get",
    "path": "/notification-subscriptions/{id}"
  },
  {
    "method": "put",
    "path": "/notification-subscriptions/{id}"
  },
  {
    "method": "delete",
    "path": "/notification-subscriptions/{id}"
  },
  {
    "method": "post",
    "path": "/notification-subscriptions/{id}/enable"
  },
  {
    "method": "post",
    "path": "/notification-subscriptions/{id}/disable"
  },
  {
    "method": "get",
    "path": "/sales"
  },
  {
    "method": "post",
    "path": "/sales"
  },
  {
    "method": "get",
    "path": "/sales/{id}"
  },
  {
    "method": "get",
    "path": "/iot/config/{id}"
  },
  {
    "method": "post",
    "path": "/iot/sales"
  },
  {
    "method": "post",
    "path": "/iot/telemetry"
  }
];

describe("API smoke", () => {
  jest.setTimeout(60_000);

  test.each(endpoints)("$method $path responds (<400)", async (ep) => {
    const url = BASE + ep.path.replace(/{{|}}/g, ""); // naive cleanup for path vars
    try {
      const res = await axios.request({
        method: ep.method as any,
        url,
        headers: authHeaders(),
        validateStatus: () => true,
      });
      expect(res.status).toBeLessThan(400);
    } catch (err) {
      // Network or other error
      throw err;
    }
  });
});